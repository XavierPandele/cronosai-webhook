const { executeQuery, createConnection } = require('../lib/database');
const { combinarFechaHora, validarReserva, generarConversacionCompleta } = require('../lib/utils');

// Estado de conversaciones por CallSid (en memoria - para producci√≥n usa Redis/DB)
const conversationStates = new Map();

module.exports = async function handler(req, res) {
  console.log('üìû Twilio Call recibida');
  console.log('Method:', req.method);
  console.log('Body:', req.body);

  try {
    // Extraer par√°metros de Twilio
    const { 
      CallSid, 
      SpeechResult, 
      Digits,
      From,
      To,
      CallStatus 
    } = req.body;

    // Obtener o crear estado de conversaci√≥n
    let state = conversationStates.get(CallSid) || {
      step: 'greeting',
      data: {},
      phone: From,
      conversationHistory: [],
      language: 'es' // Detectar idioma por defecto
    };

    // Guardar entrada del usuario si existe
    const userInput = SpeechResult || Digits || '';
    if (userInput) {
      state.conversationHistory.push({
        role: 'user',
        message: userInput,
        timestamp: new Date().toISOString()
      });
    }

    // Procesar seg√∫n el paso actual
    const response = await processConversationStep(state, userInput);
    
    // Guardar el mensaje del bot
    state.conversationHistory.push({
      role: 'bot',
      message: response.message,
      timestamp: new Date().toISOString()
    });

    // Actualizar estado
    conversationStates.set(CallSid, state);

    // Si la conversaci√≥n est√° completa, guardar en BD
    if (state.step === 'complete') {
      await saveReservation(state);
      // Limpiar el estado despu√©s de guardar
      setTimeout(() => conversationStates.delete(CallSid), 60000); // Limpiar despu√©s de 1 minuto
    }

    // Generar TwiML response
    const twiml = generateTwiML(response, state.language);
    
    res.setHeader('Content-Type', 'text/xml');
    res.status(200).send(twiml);

  } catch (error) {
    console.error('‚ùå Error en Twilio Call:', error);
    
    const errorTwiml = `<?xml version="1.0" encoding="UTF-8"?>
<Response>
  <Say voice="Google.es-ES-Neural2-B" language="es-ES">
    Disculpe, hubo un error t√©cnico. Por favor, intente de nuevo m√°s tarde o contacte directamente al restaurante.
  </Say>
  <Hangup/>
</Response>`;
    
    res.setHeader('Content-Type', 'text/xml');
    res.status(200).send(errorTwiml);
  }
}

async function processConversationStep(state, userInput) {
  const step = state.step;
  const text = userInput.toLowerCase();

  console.log(`üìã Procesando paso: ${step}, Input: "${userInput}"`);

  // Detectar idioma si es el primer paso
  if (step === 'greeting' && userInput) {
    state.language = detectLanguage(userInput);
    console.log(`üåç Idioma detectado: ${state.language}`);
  }

  switch (step) {
     case 'greeting':
       // Primera interacci√≥n - saludo general
       // Si detectamos un idioma diferente al espa√±ol y hay intenci√≥n de reserva, saltar al siguiente paso
       if (state.language !== 'es' && userInput && isReservationRequest(userInput)) {
         state.step = 'ask_people';
         const reservationMessages = getMultilingualMessages('reservation', state.language);
         return {
           message: getRandomMessage(reservationMessages),
           gather: true
         };
       }
       
       // Saludo normal
       state.step = 'ask_intention';
       const greetingMessages = getMultilingualMessages('greeting', state.language);
       return {
         message: getRandomMessage(greetingMessages),
         gather: true
       };

     case 'ask_intention':
       // Confirmar que quiere hacer una reserva
       const intentionResult = handleIntentionResponse(text);
       
       if (intentionResult.action === 'reservation') {
         state.step = 'ask_people';
         const reservationMessages = getMultilingualMessages('reservation', state.language);
         return {
           message: getRandomMessage(reservationMessages),
           gather: true
         };
       } else if (intentionResult.action === 'clarify') {
         return {
           message: intentionResult.message,
           gather: true
         };
       } else {
         const clarifyMessages = getMultilingualMessages('clarify', state.language);
         return {
           message: getRandomMessage(clarifyMessages),
           gather: true
         };
       }

     case 'ask_people':
       const people = extractPeopleCount(text);
       if (people) {
         state.data.NumeroReserva = people;
         state.step = 'ask_date';
         const peopleMessages = getMultilingualMessages('people', state.language, { people });
         return {
           message: getRandomMessage(peopleMessages),
           gather: true
         };
       } else {
         const errorResponse = handleUnclearResponse(text, 'people', state.language);
         return {
           message: errorResponse,
           gather: true
         };
       }

     case 'ask_date':
       const date = extractDate(text);
       if (date) {
         state.data.FechaReserva = date;
         state.step = 'ask_time';
         const dateMessages = getMultilingualMessages('date', state.language, { date });
         return {
           message: getRandomMessage(dateMessages),
           gather: true
         };
       } else {
         const errorResponse = handleUnclearResponse(text, 'date', state.language);
         return {
           message: errorResponse,
           gather: true
         };
       }

     case 'ask_time':
       const time = extractTime(text);
       if (time) {
         state.data.HoraReserva = time;
         state.step = 'ask_name';
         const timeMessages = getMultilingualMessages('time', state.language, { time });
         return {
           message: getRandomMessage(timeMessages),
           gather: true
         };
       } else {
         const errorResponse = handleUnclearResponse(text, 'time', state.language);
         return {
           message: errorResponse,
           gather: true
         };
       }

     case 'ask_name':
       const name = extractName(text);
       if (name) {
         state.data.NomReserva = name;
         state.step = 'ask_phone';
         const nameMessages = getMultilingualMessages('name', state.language, { name });
         return {
           message: getRandomMessage(nameMessages),
           gather: true
         };
       } else {
         const errorResponse = handleUnclearResponse(text, 'name', state.language);
         return {
           message: errorResponse,
           gather: true
         };
       }

    case 'ask_phone':
      // Verificar si quiere usar el n√∫mero actual o dar otro
      if (text.includes('este') || text.includes('mismo') || text.includes('si') || text.includes('s√≠') || text.includes('vale') || text.includes('ok')) {
        // Usa el n√∫mero de la llamada
        state.data.TelefonReserva = state.phone;
        state.step = 'confirm';
        return {
          message: getConfirmationMessage(state.data, state.language),
          gather: true
        };
      } else if (text.includes('otro') || text.includes('diferente') || text.includes('no')) {
        // Preguntar por otro n√∫mero
        state.step = 'ask_phone_number';
        const phoneMessages = getMultilingualMessages('ask_phone', state.language);
        return {
          message: getRandomMessage(phoneMessages),
          gather: true
        };
      } else {
        // Intentar extraer un n√∫mero directamente
        const phoneMatch = text.match(/\d{9,}/);
        if (phoneMatch) {
          state.data.TelefonReserva = phoneMatch[0];
          state.step = 'confirm';
          return {
            message: getConfirmationMessage(state.data, state.language),
            gather: true
          };
        } else {
          const phoneChoiceMessages = getMultilingualMessages('phone_choice', state.language);
          return {
            message: getRandomMessage(phoneChoiceMessages),
            gather: true
          };
        }
      }

     case 'ask_phone_number':
       // Extraer el n√∫mero de tel√©fono (puede estar en d√≠gitos o palabras)
       const extractedPhone = extractPhoneNumber(text);
       if (extractedPhone && extractedPhone.length >= 9) {
         state.data.TelefonReserva = extractedPhone;
         state.step = 'confirm';
         return {
           message: getConfirmationMessage(state.data, state.language),
           gather: true
         };
       } else {
         const errorResponse = handleUnclearResponse(text, 'phone', state.language);
         return {
           message: errorResponse,
           gather: true
         };
       }

     case 'confirm':
       const confirmationResult = handleConfirmationResponse(text);
       
       if (confirmationResult.action === 'confirm') {
         state.step = 'complete';
         const confirmMessages = getMultilingualMessages('confirm', state.language);
         return {
           message: getRandomMessage(confirmMessages),
           gather: false
         };
       } else if (confirmationResult.action === 'modify') {
         return handleModificationRequest(state, confirmationResult.modification);
       } else if (confirmationResult.action === 'restart') {
         state.step = 'ask_people';
         state.data = {};
         const restartMessages = getMultilingualMessages('restart', state.language);
         return {
           message: getRandomMessage(restartMessages),
           gather: true
         };
       } else if (confirmationResult.action === 'clarify') {
         return {
           message: confirmationResult.message,
           gather: true
         };
       } else {
         const clarifyConfirmMessages = getMultilingualMessages('clarify_confirm', state.language);
         return {
           message: getRandomMessage(clarifyConfirmMessages),
           gather: true
         };
       }

    default:
      state.step = 'greeting';
      const defaultMessages = getMultilingualMessages('default', state.language);
      return {
        message: getRandomMessage(defaultMessages),
        gather: true
      };
  }
}

function generateTwiML(response, language = 'es') {
  const { message, gather = true } = response;

  // Configuraci√≥n de voz por idioma - Google Neural cuando est√© disponible
  const voiceConfig = {
    es: { voice: 'Google.es-ES-Neural2-B', language: 'es-ES' },
    en: { voice: 'Google.en-US-Neural2-A', language: 'en-US' },
    de: { voice: 'Google.de-DE-Neural2-A', language: 'de-DE' },
    it: { voice: 'Google.it-IT-Neural2-A', language: 'it-IT' },
    fr: { voice: 'Google.fr-FR-Neural2-A', language: 'fr-FR' },
    pt: { voice: 'Google.pt-BR-Neural2-A', language: 'pt-BR' }
  };

  const config = voiceConfig[language] || voiceConfig.es;

  if (gather) {
    // Usar Gather para capturar la respuesta del usuario
    return `<?xml version="1.0" encoding="UTF-8"?>
<Response>
  <Gather 
    input="speech" 
    action="/api/twilio-call-improved" 
    method="POST"
    language="${config.language}"
    speechTimeout="3"
    timeout="8">
    <Say voice="${config.voice}" language="${config.language}">${escapeXml(message)}</Say>
  </Gather>
  <Say voice="${config.voice}" language="${config.language}">${getRandomMessage(['No escuch√© respuesta. ¬øSigue ah√≠?', 'Disculpe, no escuch√©. ¬øSigue ah√≠?', '¬øEst√° ah√≠? No escuch√© nada.', '¬øSigue en la l√≠nea? No escuch√© respuesta.', 'Disculpe, ¬øpodr√≠a repetir? No escuch√© bien.'])}</Say>
  <Redirect>/api/twilio-call-improved</Redirect>
</Response>`;
  } else {
    // Solo decir el mensaje y colgar
    return `<?xml version="1.0" encoding="UTF-8"?>
<Response>
  <Say voice="${config.voice}" language="${config.language}">${escapeXml(message)}</Say>
  <Pause length="1"/>
  <Hangup/>
</Response>`;
  }
}

async function saveReservation(state) {
  try {
    console.log('üíæ Guardando reserva en base de datos...');
    
    const data = state.data;
    
    // Validar datos
    const validacion = validarReserva(data);
    if (!validacion.valido) {
      console.error('‚ùå Validaci√≥n fallida:', validacion.errores);
      return false;
    }

    // Preparar conversaci√≥n completa en formato Markdown
    const conversacionCompleta = generateMarkdownConversation(state);

    // Combinar fecha y hora
    const dataCombinada = combinarFechaHora(data.FechaReserva, data.HoraReserva);

    // Conectar a base de datos
    const connection = await createConnection();
    
    try {
      await connection.beginTransaction();

      // 1. Insertar o actualizar cliente
      const clienteQuery = `
        INSERT INTO CLIENT (NOM_COMPLET, TELEFON, DATA_ULTIMA_RESERVA) 
        VALUES (?, ?, NOW()) 
        ON DUPLICATE KEY UPDATE 
          NOM_COMPLET = VALUES(NOM_COMPLET), 
          DATA_ULTIMA_RESERVA = NOW()
      `;
      
      await connection.execute(clienteQuery, [
        data.NomReserva,
        data.TelefonReserva
      ]);

      console.log('‚úÖ Cliente insertado/actualizado');

      // 2. Insertar reserva
      const reservaQuery = `
        INSERT INTO RESERVA 
        (data_reserva, num_persones, telefon, nom_persona_reserva, observacions, conversa_completa) 
        VALUES (?, ?, ?, ?, ?, ?)
      `;
      
      const [result] = await connection.execute(reservaQuery, [
        dataCombinada,
        data.NumeroReserva,
        data.TelefonReserva,
        data.NomReserva,
        'Reserva realizada por tel√©fono (Twilio)',
        conversacionCompleta
      ]);

      const idReserva = result.insertId;
      console.log('‚úÖ Reserva guardada con ID:', idReserva);

      await connection.commit();
      return true;

    } catch (error) {
      await connection.rollback();
      throw error;
    } finally {
      await connection.end();
    }

  } catch (error) {
    console.error('‚ùå Error guardando reserva:', error);
    return false;
  }
}

// Funciones auxiliares de extracci√≥n

function getRandomMessage(messages) {
  const randomIndex = Math.floor(Math.random() * messages.length);
  return messages[randomIndex];
}

// Funci√≥n para obtener mensajes multiling√ºes
function getMultilingualMessages(type, language = 'es', variables = {}) {
  const messages = {
    greeting: {
      es: [
        '¬°Hola! Bienvenido a nuestro restaurante. ¬øEn qu√© puedo ayudarle?',
        '¬°Buenos d√≠as! Bienvenido. ¬øC√≥mo puedo ayudarle hoy?',
        '¬°Hola! Gracias por llamar. ¬øEn qu√© puedo asistirle?',
        '¬°Buenas tardes! Bienvenido al restaurante. ¬øQu√© necesita?',
        '¬°Hola! Encantado de atenderle. ¬øEn qu√© puedo ayudarle?'
      ],
      en: [
        'Hello! Welcome to our restaurant. How can I help you?',
        'Good morning! Welcome. How can I assist you today?',
        'Hello! Thank you for calling. How can I help you?',
        'Good afternoon! Welcome to the restaurant. What do you need?',
        'Hello! Delighted to serve you. How can I help you?'
      ],
      de: [
        'Hallo! Willkommen in unserem Restaurant. Wie kann ich Ihnen helfen?',
        'Guten Morgen! Willkommen. Wie kann ich Ihnen heute helfen?',
        'Hallo! Vielen Dank f√ºr Ihren Anruf. Wie kann ich Ihnen helfen?',
        'Guten Tag! Willkommen im Restaurant. Was ben√∂tigen Sie?',
        'Hallo! Freue mich, Ihnen zu dienen. Wie kann ich Ihnen helfen?'
      ],
      it: [
        'Ciao! Benvenuto nel nostro ristorante. Come posso aiutarti?',
        'Buongiorno! Benvenuto. Come posso assisterti oggi?',
        'Ciao! Grazie per la chiamata. Come posso aiutarti?',
        'Buon pomeriggio! Benvenuto nel ristorante. Di cosa hai bisogno?',
        'Ciao! Felice di servirti. Come posso aiutarti?'
      ],
      fr: [
        'Bonjour! Bienvenue dans notre restaurant. Comment puis-je vous aider?',
        'Bonjour! Bienvenue. Comment puis-je vous assister aujourd\'hui?',
        'Bonjour! Merci d\'avoir appel√©. Comment puis-je vous aider?',
        'Bonjour! Bienvenue au restaurant. De quoi avez-vous besoin?',
        'Bonjour! Ravi de vous servir. Comment puis-je vous aider?'
      ],
      pt: [
        'Ol√°! Bem-vindo ao nosso restaurante. Como posso ajud√°-lo?',
        'Bom dia! Bem-vindo. Como posso ajud√°-lo hoje?',
        'Ol√°! Obrigado por ligar. Como posso ajud√°-lo?',
        'Boa tarde! Bem-vindo ao restaurante. O que voc√™ precisa?',
        'Ol√°! Prazer em atend√™-lo. Como posso ajud√°-lo?'
      ]
    },
    reservation: {
      es: [
        '¬°Perfecto! Encantado de ayudarle con su reserva. ¬øPara cu√°ntas personas?',
        '¬°Excelente! Me alegra ayudarle con la reserva. ¬øCu√°ntas personas ser√°n?',
        '¬°Muy bien! Con gusto le ayudo. ¬øPara cu√°ntos comensales?',
        '¬°Perfecto! ¬øPara cu√°ntas personas necesita la mesa?',
        '¬°Genial! ¬øCu√°ntas personas van a venir?'
      ],
      en: [
        'Perfect! I\'m delighted to help you with your reservation. For how many people?',
        'Excellent! I\'m happy to help you with the reservation. How many people will it be?',
        'Great! I\'m happy to help. For how many diners?',
        'Perfect! For how many people do you need the table?',
        'Great! How many people are coming?'
      ],
      de: [
        'Perfekt! Ich helfe Ihnen gerne bei Ihrer Reservierung. F√ºr wie viele Personen?',
        'Ausgezeichnet! Ich helfe Ihnen gerne bei der Reservierung. Wie viele Personen werden es sein?',
        'Sehr gut! Ich helfe Ihnen gerne. F√ºr wie viele G√§ste?',
        'Perfekt! F√ºr wie viele Personen ben√∂tigen Sie den Tisch?',
        'Gro√üartig! Wie viele Personen kommen?'
      ],
      it: [
        'Perfetto! Sono felice di aiutarti con la tua prenotazione. Per quante persone?',
        'Eccellente! Sono felice di aiutarti con la prenotazione. Quante persone saranno?',
        'Molto bene! Sono felice di aiutarti. Per quanti commensali?',
        'Perfetto! Per quante persone hai bisogno del tavolo?',
        'Fantastico! Quante persone vengono?'
      ],
      fr: [
        'Parfait! Je suis ravi de vous aider avec votre r√©servation. Pour combien de personnes?',
        'Excellent! Je suis heureux de vous aider avec la r√©servation. Combien de personnes seront-elles?',
        'Tr√®s bien! Je suis heureux de vous aider. Pour combien de convives?',
        'Parfait! Pour combien de personnes avez-vous besoin de la table?',
        'G√©nial! Combien de personnes viennent?'
      ],
      pt: [
        'Perfeito! Estou encantado em ajud√°-lo com sua reserva. Para quantas pessoas?',
        'Excelente! Estou feliz em ajud√°-lo com a reserva. Quantas pessoas ser√£o?',
        'Muito bem! Estou feliz em ajud√°-lo. Para quantos comensais?',
        'Perfeito! Para quantas pessoas voc√™ precisa da mesa?',
        '√ìtimo! Quantas pessoas est√£o vindo?'
      ]
    },
    clarify: {
      es: [
        'Disculpe, solo puedo ayudarle con reservas. ¬øLe gustar√≠a hacer una reserva?',
        'Lo siento, solo puedo ayudarle con reservas. ¬øQuiere hacer una reserva?',
        'Perd√≥n, √∫nicamente puedo ayudarle con reservas. ¬øLe gustar√≠a reservar?',
        'Disculpe, solo manejo reservas. ¬øDesea hacer una reserva?',
        'Lo siento, solo puedo ayudarle con reservas. ¬øQuiere reservar una mesa?'
      ],
      en: [
        'Sorry, I can only help you with reservations. Would you like to make a reservation?',
        'I apologize, I can only help with reservations. Do you want to make a reservation?',
        'Sorry, I can only assist with reservations. Would you like to book?',
        'Sorry, I only handle reservations. Do you want to make a reservation?',
        'I apologize, I can only help with reservations. Do you want to book a table?'
      ],
      de: [
        'Entschuldigung, ich kann Ihnen nur bei Reservierungen helfen. M√∂chten Sie eine Reservierung vornehmen?',
        'Es tut mir leid, ich kann nur bei Reservierungen helfen. M√∂chten Sie eine Reservierung?',
        'Entschuldigung, ich kann nur bei Reservierungen helfen. M√∂chten Sie reservieren?',
        'Entschuldigung, ich bearbeite nur Reservierungen. M√∂chten Sie eine Reservierung?',
        'Es tut mir leid, ich kann nur bei Reservierungen helfen. M√∂chten Sie einen Tisch reservieren?'
      ],
      it: [
        'Scusi, posso aiutarla solo con le prenotazioni. Vorrebbe fare una prenotazione?',
        'Mi dispiace, posso aiutarla solo con le prenotazioni. Vuole fare una prenotazione?',
        'Scusi, posso assisterla solo con le prenotazioni. Vorrebbe prenotare?',
        'Scusi, gestisco solo le prenotazioni. Vuole fare una prenotazione?',
        'Mi dispiace, posso aiutarla solo con le prenotazioni. Vuole prenotare un tavolo?'
      ],
      fr: [
        'D√©sol√©, je ne peux vous aider qu\'avec les r√©servations. Souhaitez-vous faire une r√©servation?',
        'Je suis d√©sol√©, je ne peux aider qu\'avec les r√©servations. Voulez-vous faire une r√©servation?',
        'D√©sol√©, je ne peux assister qu\'avec les r√©servations. Souhaitez-vous r√©server?',
        'D√©sol√©, je ne g√®re que les r√©servations. Voulez-vous faire une r√©servation?',
        'Je suis d√©sol√©, je ne peux aider qu\'avec les r√©servations. Voulez-vous r√©server une table?'
      ],
      pt: [
        'Desculpe, s√≥ posso ajud√°-lo com reservas. Gostaria de fazer uma reserva?',
        'Sinto muito, s√≥ posso ajud√°-lo com reservas. Quer fazer uma reserva?',
        'Desculpe, s√≥ posso assistir com reservas. Gostaria de reservar?',
        'Desculpe, s√≥ lido com reservas. Quer fazer uma reserva?',
        'Sinto muito, s√≥ posso ajud√°-lo com reservas. Quer reservar uma mesa?'
      ]
    },
    people: {
      es: [
        `Perfecto, ${variables.people} ${variables.people === 1 ? 'persona' : 'personas'}. ¬øPara qu√© fecha?`,
        `Excelente, ${variables.people} ${variables.people === 1 ? 'persona' : 'personas'}. ¬øQu√© d√≠a prefieren?`,
        `Muy bien, ${variables.people} ${variables.people === 1 ? 'persona' : 'personas'}. ¬øPara cu√°ndo?`,
        `Perfecto, ${variables.people} ${variables.people === 1 ? 'persona' : 'personas'}. ¬øPara qu√© d√≠a?`,
        `Genial, ${variables.people} ${variables.people === 1 ? 'persona' : 'personas'}. ¬øCu√°ndo les gustar√≠a venir?`
      ],
      en: [
        `Perfect, ${variables.people} ${variables.people === 1 ? 'person' : 'people'}. For what date?`,
        `Excellent, ${variables.people} ${variables.people === 1 ? 'person' : 'people'}. What day do you prefer?`,
        `Great, ${variables.people} ${variables.people === 1 ? 'person' : 'people'}. For when?`,
        `Perfect, ${variables.people} ${variables.people === 1 ? 'person' : 'people'}. For what day?`,
        `Great, ${variables.people} ${variables.people === 1 ? 'person' : 'people'}. When would you like to come?`
      ],
      de: [
        `Perfekt, ${variables.people} ${variables.people === 1 ? 'Person' : 'Personen'}. F√ºr welches Datum?`,
        `Ausgezeichnet, ${variables.people} ${variables.people === 1 ? 'Person' : 'Personen'}. Welchen Tag bevorzugen Sie?`,
        `Sehr gut, ${variables.people} ${variables.people === 1 ? 'Person' : 'Personen'}. F√ºr wann?`,
        `Perfekt, ${variables.people} ${variables.people === 1 ? 'Person' : 'Personen'}. F√ºr welchen Tag?`,
        `Gro√üartig, ${variables.people} ${variables.people === 1 ? 'Person' : 'Personen'}. Wann m√∂chten Sie kommen?`
      ],
      it: [
        `Perfetto, ${variables.people} ${variables.people === 1 ? 'persona' : 'persone'}. Per quale data?`,
        `Eccellente, ${variables.people} ${variables.people === 1 ? 'persona' : 'persone'}. Quale giorno preferisci?`,
        `Molto bene, ${variables.people} ${variables.people === 1 ? 'persona' : 'persone'}. Per quando?`,
        `Perfetto, ${variables.people} ${variables.people === 1 ? 'persona' : 'persone'}. Per quale giorno?`,
        `Fantastico, ${variables.people} ${variables.people === 1 ? 'persona' : 'persone'}. Quando vorresti venire?`
      ],
      fr: [
        `Parfait, ${variables.people} ${variables.people === 1 ? 'personne' : 'personnes'}. Pour quelle date?`,
        `Excellent, ${variables.people} ${variables.people === 1 ? 'personne' : 'personnes'}. Quel jour pr√©f√©rez-vous?`,
        `Tr√®s bien, ${variables.people} ${variables.people === 1 ? 'personne' : 'personnes'}. Pour quand?`,
        `Parfait, ${variables.people} ${variables.people === 1 ? 'personne' : 'personnes'}. Pour quel jour?`,
        `G√©nial, ${variables.people} ${variables.people === 1 ? 'personne' : 'personnes'}. Quand aimeriez-vous venir?`
      ],
      pt: [
        `Perfeito, ${variables.people} ${variables.people === 1 ? 'pessoa' : 'pessoas'}. Para que data?`,
        `Excelente, ${variables.people} ${variables.people === 1 ? 'pessoa' : 'pessoas'}. Que dia voc√™ prefere?`,
        `Muito bem, ${variables.people} ${variables.people === 1 ? 'pessoa' : 'pessoas'}. Para quando?`,
        `Perfeito, ${variables.people} ${variables.people === 1 ? 'pessoa' : 'pessoas'}. Para que dia?`,
        `√ìtimo, ${variables.people} ${variables.people === 1 ? 'pessoa' : 'pessoas'}. Quando gostaria de vir?`
      ]
    },
    date: {
      es: [
        `Perfecto, ${formatDateSpanish(variables.date)}. ¬øA qu√© hora?`,
        `Excelente, ${formatDateSpanish(variables.date)}. ¬øA qu√© hora prefieren?`,
        `Muy bien, ${formatDateSpanish(variables.date)}. ¬øA qu√© hora les gustar√≠a venir?`,
        `Perfecto, ${formatDateSpanish(variables.date)}. ¬øQu√© hora les conviene?`,
        `Genial, ${formatDateSpanish(variables.date)}. ¬øA qu√© hora?`
      ],
      en: [
        `Perfect, ${formatDateEnglish(variables.date)}. What time?`,
        `Excellent, ${formatDateEnglish(variables.date)}. What time do you prefer?`,
        `Great, ${formatDateEnglish(variables.date)}. What time would you like to come?`,
        `Perfect, ${formatDateEnglish(variables.date)}. What time suits you?`,
        `Great, ${formatDateEnglish(variables.date)}. What time?`
      ],
      de: [
        `Perfekt, ${formatDateGerman(variables.date)}. Zu welcher Uhrzeit?`,
        `Ausgezeichnet, ${formatDateGerman(variables.date)}. Zu welcher Uhrzeit bevorzugen Sie?`,
        `Sehr gut, ${formatDateGerman(variables.date)}. Zu welcher Uhrzeit m√∂chten Sie kommen?`,
        `Perfekt, ${formatDateGerman(variables.date)}. Welche Uhrzeit passt Ihnen?`,
        `Gro√üartig, ${formatDateGerman(variables.date)}. Zu welcher Uhrzeit?`
      ],
      it: [
        `Perfetto, ${formatDateItalian(variables.date)}. A che ora?`,
        `Eccellente, ${formatDateItalian(variables.date)}. A che ora preferisci?`,
        `Molto bene, ${formatDateItalian(variables.date)}. A che ora vorresti venire?`,
        `Perfetto, ${formatDateItalian(variables.date)}. Che ora ti conviene?`,
        `Fantastico, ${formatDateItalian(variables.date)}. A che ora?`
      ],
      fr: [
        `Parfait, ${formatDateFrench(variables.date)}. √Ä quelle heure?`,
        `Excellent, ${formatDateFrench(variables.date)}. √Ä quelle heure pr√©f√©rez-vous?`,
        `Tr√®s bien, ${formatDateFrench(variables.date)}. √Ä quelle heure aimeriez-vous venir?`,
        `Parfait, ${formatDateFrench(variables.date)}. Quelle heure vous convient?`,
        `G√©nial, ${formatDateFrench(variables.date)}. √Ä quelle heure?`
      ],
      pt: [
        `Perfeito, ${formatDatePortuguese(variables.date)}. Que horas?`,
        `Excelente, ${formatDatePortuguese(variables.date)}. Que horas voc√™ prefere?`,
        `Muito bem, ${formatDatePortuguese(variables.date)}. Que horas gostaria de vir?`,
        `Perfeito, ${formatDatePortuguese(variables.date)}. Que horas te conv√©m?`,
        `√ìtimo, ${formatDatePortuguese(variables.date)}. Que horas?`
      ]
    },
    time: {
      es: [
        `Perfecto, a las ${variables.time}. ¬øSu nombre?`,
        `Excelente, a las ${variables.time}. ¬øC√≥mo se llama?`,
        `Muy bien, a las ${variables.time}. ¬øSu nombre, por favor?`,
        `Perfecto, a las ${variables.time}. ¬øC√≥mo me dice su nombre?`,
        `Genial, a las ${variables.time}. ¬øSu nombre?`
      ],
      en: [
        `Perfect, at ${variables.time}. Your name?`,
        `Excellent, at ${variables.time}. What's your name?`,
        `Great, at ${variables.time}. Your name, please?`,
        `Perfect, at ${variables.time}. How do you tell me your name?`,
        `Great, at ${variables.time}. Your name?`
      ],
      de: [
        `Perfekt, um ${variables.time}. Ihr Name?`,
        `Ausgezeichnet, um ${variables.time}. Wie hei√üen Sie?`,
        `Sehr gut, um ${variables.time}. Ihr Name, bitte?`,
        `Perfekt, um ${variables.time}. Wie sagen Sie mir Ihren Namen?`,
        `Gro√üartig, um ${variables.time}. Ihr Name?`
      ],
      it: [
        `Perfetto, alle ${variables.time}. Il tuo nome?`,
        `Eccellente, alle ${variables.time}. Come ti chiami?`,
        `Molto bene, alle ${variables.time}. Il tuo nome, per favore?`,
        `Perfetto, alle ${variables.time}. Come mi dici il tuo nome?`,
        `Fantastico, alle ${variables.time}. Il tuo nome?`
      ],
      fr: [
        `Parfait, √† ${variables.time}. Votre nom?`,
        `Excellent, √† ${variables.time}. Comment vous appelez-vous?`,
        `Tr√®s bien, √† ${variables.time}. Votre nom, s'il vous pla√Æt?`,
        `Parfait, √† ${variables.time}. Comment me dites-vous votre nom?`,
        `G√©nial, √† ${variables.time}. Votre nom?`
      ],
      pt: [
        `Perfeito, √†s ${variables.time}. Seu nome?`,
        `Excelente, √†s ${variables.time}. Como voc√™ se chama?`,
        `Muito bem, √†s ${variables.time}. Seu nome, por favor?`,
        `Perfeito, √†s ${variables.time}. Como me diz seu nome?`,
        `√ìtimo, √†s ${variables.time}. Seu nome?`
      ]
    },
    name: {
      es: [
        `Perfecto, ${variables.name}. ¬øDesea usar este n√∫mero de tel√©fono para la reserva, o prefiere indicar otro?`,
        `Excelente, ${variables.name}. ¬øUsa este n√∫mero o prefiere dar otro?`,
        `Muy bien, ${variables.name}. ¬øEste tel√©fono est√° bien o quiere otro?`,
        `Perfecto, ${variables.name}. ¬øLe sirve este n√∫mero o prefiere uno diferente?`,
        `Genial, ${variables.name}. ¬øUsa este n√∫mero o necesita otro?`
      ],
      en: [
        `Perfect, ${variables.name}. Do you want to use this phone number for the reservation, or do you prefer to provide another one?`,
        `Excellent, ${variables.name}. Do you use this number or do you prefer to give another one?`,
        `Great, ${variables.name}. Is this phone number okay or do you want another one?`,
        `Perfect, ${variables.name}. Does this number work for you or do you prefer a different one?`,
        `Great, ${variables.name}. Do you use this number or do you need another one?`
      ],
      de: [
        `Perfekt, ${variables.name}. M√∂chten Sie diese Telefonnummer f√ºr die Reservierung verwenden, oder bevorzugen Sie eine andere?`,
        `Ausgezeichnet, ${variables.name}. Verwenden Sie diese Nummer oder bevorzugen Sie eine andere?`,
        `Sehr gut, ${variables.name}. Ist diese Telefonnummer in Ordnung oder m√∂chten Sie eine andere?`,
        `Perfekt, ${variables.name}. Funktioniert diese Nummer f√ºr Sie oder bevorzugen Sie eine andere?`,
        `Gro√üartig, ${variables.name}. Verwenden Sie diese Nummer oder ben√∂tigen Sie eine andere?`
      ],
      it: [
        `Perfetto, ${variables.name}. Vuoi usare questo numero di telefono per la prenotazione, o preferisci indicarne un altro?`,
        `Eccellente, ${variables.name}. Usi questo numero o preferisci darne un altro?`,
        `Molto bene, ${variables.name}. Questo telefono va bene o vuoi un altro?`,
        `Perfetto, ${variables.name}. Ti serve questo numero o preferisci uno diverso?`,
        `Fantastico, ${variables.name}. Usi questo numero o hai bisogno di un altro?`
      ],
      fr: [
        `Parfait, ${variables.name}. Souhaitez-vous utiliser ce num√©ro de t√©l√©phone pour la r√©servation, ou pr√©f√©rez-vous en indiquer un autre?`,
        `Excellent, ${variables.name}. Utilisez-vous ce num√©ro ou pr√©f√©rez-vous en donner un autre?`,
        `Tr√®s bien, ${variables.name}. Ce t√©l√©phone convient-il ou voulez-vous un autre?`,
        `Parfait, ${variables.name}. Ce num√©ro vous convient-il ou pr√©f√©rez-vous un diff√©rent?`,
        `G√©nial, ${variables.name}. Utilisez-vous ce num√©ro ou avez-vous besoin d'un autre?`
      ],
      pt: [
        `Perfeito, ${variables.name}. Quer usar este n√∫mero de telefone para a reserva, ou prefere indicar outro?`,
        `Excelente, ${variables.name}. Usa este n√∫mero ou prefere dar outro?`,
        `Muito bem, ${variables.name}. Este telefone est√° bem ou quer outro?`,
        `Perfeito, ${variables.name}. Este n√∫mero te serve ou prefere um diferente?`,
        `√ìtimo, ${variables.name}. Usa este n√∫mero ou precisa de outro?`
      ]
    },
    ask_phone: {
      es: [
        '¬øQu√© n√∫mero de tel√©fono prefiere?',
        '¬øCu√°l es su n√∫mero de tel√©fono?',
        '¬øPodr√≠a darme su n√∫mero de tel√©fono?',
        '¬øMe dice su n√∫mero de tel√©fono?',
        '¬øCu√°l es el n√∫mero donde podemos contactarle?'
      ],
      en: [
        'What phone number do you prefer?',
        'What is your phone number?',
        'Could you give me your phone number?',
        'Can you tell me your phone number?',
        'What is the number where we can contact you?'
      ],
      de: [
        'Welche Telefonnummer bevorzugen Sie?',
        'Wie ist Ihre Telefonnummer?',
        'K√∂nnten Sie mir Ihre Telefonnummer geben?',
        'K√∂nnen Sie mir Ihre Telefonnummer sagen?',
        'Wie ist die Nummer, unter der wir Sie erreichen k√∂nnen?'
      ],
      it: [
        'Che numero di telefono preferisci?',
        'Qual √® il tuo numero di telefono?',
        'Potresti darmi il tuo numero di telefono?',
        'Puoi dirmi il tuo numero di telefono?',
        'Qual √® il numero dove possiamo contattarti?'
      ],
      fr: [
        'Quel num√©ro de t√©l√©phone pr√©f√©rez-vous?',
        'Quel est votre num√©ro de t√©l√©phone?',
        'Pourriez-vous me donner votre num√©ro de t√©l√©phone?',
        'Pouvez-vous me dire votre num√©ro de t√©l√©phone?',
        'Quel est le num√©ro o√π nous pouvons vous contacter?'
      ],
      pt: [
        'Que n√∫mero de telefone voc√™ prefere?',
        'Qual √© o seu n√∫mero de telefone?',
        'Poderia me dar o seu n√∫mero de telefone?',
        'Pode me dizer o seu n√∫mero de telefone?',
        'Qual √© o n√∫mero onde podemos contat√°-lo?'
      ]
    },
    phone_choice: {
      es: [
        '¬øDesea usar este n√∫mero o prefiere dar otro?',
        '¬øUsa este n√∫mero o quiere uno diferente?',
        '¬øEste tel√©fono est√° bien o prefiere otro?',
        '¬øLe sirve este n√∫mero o necesita otro?',
        '¬øUsa este n√∫mero o prefiere indicar otro?'
      ],
      en: [
        'Do you want to use this number or do you prefer to give another one?',
        'Do you use this number or do you want a different one?',
        'Is this phone okay or do you prefer another one?',
        'Does this number work for you or do you need another one?',
        'Do you use this number or do you prefer to provide another one?'
      ],
      de: [
        'M√∂chten Sie diese Nummer verwenden oder bevorzugen Sie eine andere?',
        'Verwenden Sie diese Nummer oder m√∂chten Sie eine andere?',
        'Ist dieses Telefon in Ordnung oder bevorzugen Sie ein anderes?',
        'Funktioniert diese Nummer f√ºr Sie oder ben√∂tigen Sie eine andere?',
        'Verwenden Sie diese Nummer oder bevorzugen Sie eine andere anzugeben?'
      ],
      it: [
        'Vuoi usare questo numero o preferisci darne un altro?',
        'Usi questo numero o vuoi uno diverso?',
        'Questo telefono va bene o preferisci un altro?',
        'Ti serve questo numero o hai bisogno di un altro?',
        'Usi questo numero o preferisci indicarne un altro?'
      ],
      fr: [
        'Souhaitez-vous utiliser ce num√©ro ou pr√©f√©rez-vous en donner un autre?',
        'Utilisez-vous ce num√©ro ou voulez-vous un diff√©rent?',
        'Ce t√©l√©phone convient-il ou pr√©f√©rez-vous un autre?',
        'Ce num√©ro vous convient-il ou avez-vous besoin d\'un autre?',
        'Utilisez-vous ce num√©ro ou pr√©f√©rez-vous en indiquer un autre?'
      ],
      pt: [
        'Quer usar este n√∫mero ou prefere dar outro?',
        'Usa este n√∫mero ou quer um diferente?',
        'Este telefone est√° bem ou prefere outro?',
        'Este n√∫mero te serve ou precisa de outro?',
        'Usa este n√∫mero ou prefere indicar outro?'
      ]
    },
    confirm: {
      es: [
        '¬°Perfecto! Su reserva est√° confirmada. Le esperamos. ¬°Buen d√≠a!',
        '¬°Excelente! Reserva confirmada. Les esperamos. ¬°Que tengan buen d√≠a!',
        '¬°Muy bien! Todo listo. Les esperamos. ¬°Hasta pronto!',
        '¬°Genial! Reserva confirmada. Nos vemos pronto. ¬°Buen d√≠a!',
        '¬°Perfecto! Todo confirmado. Les esperamos. ¬°Que disfruten!'
      ],
      en: [
        'Perfect! Your reservation is confirmed. We look forward to seeing you. Have a great day!',
        'Excellent! Reservation confirmed. We look forward to seeing you. Have a great day!',
        'Great! Everything is ready. We look forward to seeing you. See you soon!',
        'Great! Reservation confirmed. See you soon. Have a great day!',
        'Perfect! Everything confirmed. We look forward to seeing you. Enjoy!'
      ],
      de: [
        'Perfekt! Ihre Reservierung ist best√§tigt. Wir freuen uns auf Sie. Sch√∂nen Tag!',
        'Ausgezeichnet! Reservierung best√§tigt. Wir freuen uns auf Sie. Sch√∂nen Tag!',
        'Sehr gut! Alles bereit. Wir freuen uns auf Sie. Bis bald!',
        'Gro√üartig! Reservierung best√§tigt. Bis bald. Sch√∂nen Tag!',
        'Perfekt! Alles best√§tigt. Wir freuen uns auf Sie. Viel Spa√ü!'
      ],
      it: [
        'Perfetto! La tua prenotazione √® confermata. Ti aspettiamo. Buona giornata!',
        'Eccellente! Prenotazione confermata. Ti aspettiamo. Buona giornata!',
        'Molto bene! Tutto pronto. Ti aspettiamo. A presto!',
        'Fantastico! Prenotazione confermata. A presto. Buona giornata!',
        'Perfetto! Tutto confermato. Ti aspettiamo. Divertiti!'
      ],
      fr: [
        'Parfait! Votre r√©servation est confirm√©e. Nous vous attendons. Bonne journ√©e!',
        'Excellent! R√©servation confirm√©e. Nous vous attendons. Bonne journ√©e!',
        'Tr√®s bien! Tout est pr√™t. Nous vous attendons. √Ä bient√¥t!',
        'G√©nial! R√©servation confirm√©e. √Ä bient√¥t. Bonne journ√©e!',
        'Parfait! Tout confirm√©. Nous vous attendons. Amusez-vous bien!'
      ],
      pt: [
        'Perfeito! Sua reserva est√° confirmada. Esperamos por voc√™. Tenha um √≥timo dia!',
        'Excelente! Reserva confirmada. Esperamos por voc√™. Tenha um √≥timo dia!',
        'Muito bem! Tudo pronto. Esperamos por voc√™. At√© logo!',
        '√ìtimo! Reserva confirmada. At√© logo. Tenha um √≥timo dia!',
        'Perfeito! Tudo confirmado. Esperamos por voc√™. Divirta-se!'
      ]
    },
    restart: {
      es: [
        'De acuerdo. Empezamos de nuevo. ¬øPara cu√°ntas personas?',
        'Perfecto. Comenzamos de nuevo. ¬øPara cu√°ntas personas?',
        'Muy bien. Volvemos a empezar. ¬øPara cu√°ntas personas?',
        'Entendido. Empezamos otra vez. ¬øPara cu√°ntas personas?',
        'Perfecto. Reiniciamos. ¬øPara cu√°ntas personas?'
      ],
      en: [
        'Okay. Let\'s start over. For how many people?',
        'Perfect. Let\'s start again. For how many people?',
        'Great. Let\'s start over. For how many people?',
        'Understood. Let\'s start again. For how many people?',
        'Perfect. Let\'s restart. For how many people?'
      ],
      de: [
        'In Ordnung. Wir fangen von vorne an. F√ºr wie viele Personen?',
        'Perfekt. Wir beginnen von vorne. F√ºr wie viele Personen?',
        'Sehr gut. Wir fangen nochmal an. F√ºr wie viele Personen?',
        'Verstanden. Wir beginnen nochmal. F√ºr wie viele Personen?',
        'Perfekt. Wir starten neu. F√ºr wie viele Personen?'
      ],
      it: [
        'D\'accordo. Ricominciamo. Per quante persone?',
        'Perfetto. Ricominciamo. Per quante persone?',
        'Molto bene. Ricominciamo da capo. Per quante persone?',
        'Capito. Ricominciamo. Per quante persone?',
        'Perfetto. Riavvia. Per quante persone?'
      ],
      fr: [
        'D\'accord. Recommen√ßons. Pour combien de personnes?',
        'Parfait. Recommen√ßons. Pour combien de personnes?',
        'Tr√®s bien. Recommen√ßons. Pour combien de personnes?',
        'Compris. Recommen√ßons. Pour combien de personnes?',
        'Parfait. Red√©marrons. Pour combien de personnes?'
      ],
      pt: [
        'De acordo. Come√ßamos de novo. Para quantas pessoas?',
        'Perfeito. Come√ßamos novamente. Para quantas pessoas?',
        'Muito bem. Voltamos a come√ßar. Para quantas pessoas?',
        'Entendido. Come√ßamos outra vez. Para quantas pessoas?',
        'Perfeito. Reiniciamos. Para quantas pessoas?'
      ]
    },
    clarify_confirm: {
      es: [
        '¬øEs correcto? Puede decir s√≠, no, o qu√© quiere cambiar.',
        '¬øEst√° bien? Puede confirmar, negar, o decir qu√© modificar.',
        '¬øLe parece bien? Puede decir s√≠, no, o qu√© desea cambiar.',
        '¬øEs correcto? Puede aceptar, rechazar, o indicar qu√© cambiar.',
        '¬øEst√° de acuerdo? Puede confirmar, corregir, o decir qu√© cambiar.'
      ],
      en: [
        'Is it correct? You can say yes, no, or what you want to change.',
        'Is it okay? You can confirm, deny, or say what to modify.',
        'Does it look good? You can say yes, no, or what you want to change.',
        'Is it correct? You can accept, reject, or indicate what to change.',
        'Do you agree? You can confirm, correct, or say what to change.'
      ],
      de: [
        'Ist es richtig? Sie k√∂nnen ja, nein sagen oder was Sie √§ndern m√∂chten.',
        'Ist es in Ordnung? Sie k√∂nnen best√§tigen, verneinen oder sagen was zu √§ndern.',
        'Sieht es gut aus? Sie k√∂nnen ja, nein sagen oder was Sie √§ndern m√∂chten.',
        'Ist es richtig? Sie k√∂nnen akzeptieren, ablehnen oder angeben was zu √§ndern.',
        'Sind Sie einverstanden? Sie k√∂nnen best√§tigen, korrigieren oder sagen was zu √§ndern.'
      ],
      it: [
        '√à corretto? Puoi dire s√¨, no, o cosa vuoi cambiare.',
        'Va bene? Puoi confermare, negare, o dire cosa modificare.',
        'Ti sembra bene? Puoi dire s√¨, no, o cosa vuoi cambiare.',
        '√à corretto? Puoi accettare, rifiutare, o indicare cosa cambiare.',
        'Sei d\'accordo? Puoi confermare, correggere, o dire cosa cambiare.'
      ],
      fr: [
        'Est-ce correct? Vous pouvez dire oui, non, ou ce que vous voulez changer.',
        'Est-ce que √ßa va? Vous pouvez confirmer, nier, ou dire ce qu\'il faut modifier.',
        '√áa vous semble bien? Vous pouvez dire oui, non, ou ce que vous voulez changer.',
        'Est-ce correct? Vous pouvez accepter, rejeter, ou indiquer ce qu\'il faut changer.',
        '√ätes-vous d\'accord? Vous pouvez confirmer, corriger, ou dire ce qu\'il faut changer.'
      ],
      pt: [
        'Est√° correto? Voc√™ pode dizer sim, n√£o, ou o que quer mudar.',
        'Est√° bem? Voc√™ pode confirmar, negar, ou dizer o que modificar.',
        'Parece bem? Voc√™ pode dizer sim, n√£o, ou o que quer mudar.',
        'Est√° correto? Voc√™ pode aceitar, rejeitar, ou indicar o que mudar.',
        'Voc√™ concorda? Voc√™ pode confirmar, corrigir, ou dizer o que mudar.'
      ]
    },
    default: {
      es: [
        '¬øEn qu√© puedo ayudarle? ¬øLe gustar√≠a hacer una reserva?',
        '¬øC√≥mo puedo asistirle? ¬øQuiere hacer una reserva?',
        '¬øEn qu√© le puedo ayudar? ¬øDesea reservar una mesa?',
        '¬øQu√© necesita? ¬øLe gustar√≠a hacer una reserva?',
        '¬øC√≥mo puedo ayudarle? ¬øQuiere hacer una reserva?'
      ],
      en: [
        'How can I help you? Would you like to make a reservation?',
        'How can I assist you? Do you want to make a reservation?',
        'How can I help you? Would you like to book a table?',
        'What do you need? Would you like to make a reservation?',
        'How can I help you? Do you want to make a reservation?'
      ],
      de: [
        'Wie kann ich Ihnen helfen? M√∂chten Sie eine Reservierung vornehmen?',
        'Wie kann ich Ihnen assistieren? M√∂chten Sie eine Reservierung?',
        'Wie kann ich Ihnen helfen? M√∂chten Sie einen Tisch reservieren?',
        'Was ben√∂tigen Sie? M√∂chten Sie eine Reservierung vornehmen?',
        'Wie kann ich Ihnen helfen? M√∂chten Sie eine Reservierung?'
      ],
      it: [
        'Come posso aiutarti? Vorresti fare una prenotazione?',
        'Come posso assisterti? Vuoi fare una prenotazione?',
        'Come posso aiutarti? Vorresti prenotare un tavolo?',
        'Di cosa hai bisogno? Vorresti fare una prenotazione?',
        'Come posso aiutarti? Vuoi fare una prenotazione?'
      ],
      fr: [
        'Comment puis-je vous aider? Souhaitez-vous faire une r√©servation?',
        'Comment puis-je vous assister? Voulez-vous faire une r√©servation?',
        'Comment puis-je vous aider? Souhaitez-vous r√©server une table?',
        'De quoi avez-vous besoin? Souhaitez-vous faire une r√©servation?',
        'Comment puis-je vous aider? Voulez-vous faire une r√©servation?'
      ],
      pt: [
        'Como posso ajud√°-lo? Gostaria de fazer uma reserva?',
        'Como posso assisti-lo? Quer fazer uma reserva?',
        'Como posso ajud√°-lo? Gostaria de reservar uma mesa?',
        'O que voc√™ precisa? Gostaria de fazer uma reserva?',
        'Como posso ajud√°-lo? Quer fazer uma reserva?'
      ]
    }
  };

  return messages[type] && messages[type][language] ? messages[type][language] : messages[type]['es'];
}

// Detecci√≥n b√°sica de idioma
function detectLanguage(text) {
  const languagePatterns = {
    en: ['hello', 'hi', 'good morning', 'good afternoon', 'good evening', 'book', 'reservation', 'table', 'want', 'need', 'would like'],
    de: ['hallo', 'guten tag', 'guten morgen', 'guten abend', 'reservierung', 'tisch', 'm√∂chte', 'brauche'],
    it: ['ciao', 'buongiorno', 'buonasera', 'prenotazione', 'tavolo', 'vorrei', 'ho bisogno'],
    fr: ['bonjour', 'bonsoir', 'r√©servation', 'table', 'je voudrais', 'j\'ai besoin'],
    pt: ['ol√°', 'bom dia', 'boa tarde', 'reserva', 'mesa', 'gostaria', 'preciso'],
    es: ['hola', 'buenos d√≠as', 'buenas tardes', 'reserva', 'mesa', 'quiero', 'necesito']
  };

  const lowerText = text.toLowerCase();
  let maxMatches = 0;
  let detectedLanguage = 'es'; // Por defecto espa√±ol

  for (const [lang, patterns] of Object.entries(languagePatterns)) {
    const matches = patterns.filter(pattern => lowerText.includes(pattern)).length;
    if (matches > maxMatches) {
      maxMatches = matches;
      detectedLanguage = lang;
    }
  }

  return detectedLanguage;
}

function handleConfirmationResponse(text) {
  // Palabras de confirmaci√≥n positiva
  const positiveWords = [
    'si', 's√≠', 'correcto', 'confirmo', 'perfecto', 'bien', 'vale', 'ok', 'okay',
    'exacto', 'eso es', 'as√≠ es', 'est√° bien', 'me parece bien', 'de acuerdo',
    'confirmado', 'acepto', 'procedo', 'adelante', 'contin√∫o'
  ];
  
  // Palabras de negaci√≥n
  const negativeWords = [
    'no', 'incorrecto', 'mal', 'error', 'cambiar', 'modificar', 'corregir',
    'no es', 'no est√° bien', 'no me parece', 'discrepo', 'no acepto'
  ];
  
  // Palabras para reiniciar
  const restartWords = [
    'empezar de nuevo', 'volver a empezar', 'reiniciar', 'otra vez', 'de nuevo',
    'cambiar todo', 'empezamos otra vez', 'resetear'
  ];
  
  const lowerText = text.toLowerCase();
  
  // Verificar confirmaci√≥n positiva
  if (positiveWords.some(word => lowerText.includes(word))) {
    return { action: 'confirm' };
  }
  
  // Verificar negaci√≥n
  if (negativeWords.some(word => lowerText.includes(word))) {
    return { action: 'clarify', message: 'Entiendo. ¬øQu√© le gustar√≠a cambiar? Puede decir cambiar personas, cambiar fecha, cambiar hora, cambiar nombre o cambiar tel√©fono.' };
  }
  
  // Verificar reinicio completo
  if (restartWords.some(word => lowerText.includes(word))) {
    return { action: 'restart' };
  }
  
  // Detectar modificaciones espec√≠ficas
  const modifications = detectSpecificModifications(lowerText);
  if (modifications.length > 0) {
    return { action: 'modify', modification: modifications[0] };
  }
  
  // Respuesta ambigua
  return { action: 'clarify', message: '¬øEs correcto? Puede decir s√≠ para confirmar, no para cambiar algo, o qu√© espec√≠ficamente quiere modificar.' };
}

function detectSpecificModifications(text) {
  const modifications = [];
  
  // Detectar cambios espec√≠ficos
  if (text.includes('personas') || text.includes('gente') || text.includes('comensales') || text.includes('n√∫mero de personas')) {
    modifications.push('people');
  }
  if (text.includes('fecha') || text.includes('d√≠a') || text.includes('d√≠a') || text.includes('cuando')) {
    modifications.push('date');
  }
  if (text.includes('hora') || text.includes('tiempo') || text.includes('a qu√© hora')) {
    modifications.push('time');
  }
  if (text.includes('nombre') || text.includes('como me llamo') || text.includes('mi nombre')) {
    modifications.push('name');
  }
  if (text.includes('tel√©fono') || text.includes('n√∫mero') || text.includes('tel√©fono')) {
    modifications.push('phone');
  }
  
  return modifications;
}

function handleModificationRequest(state, modification) {
  switch (modification) {
    case 'people':
      state.step = 'ask_people';
      return {
        message: 'Perfecto. ¬øPara cu√°ntas personas?',
        gather: true
      };
      
    case 'date':
      state.step = 'ask_date';
      return {
        message: 'Perfecto. ¬øPara qu√© fecha?',
        gather: true
      };
      
    case 'time':
      state.step = 'ask_time';
      return {
        message: 'Perfecto. ¬øA qu√© hora?',
        gather: true
      };
      
    case 'name':
      state.step = 'ask_name';
      return {
        message: 'Perfecto. ¬øSu nombre?',
        gather: true
      };
      
    case 'phone':
      state.step = 'ask_phone';
      return {
        message: 'Perfecto. ¬øDesea usar este n√∫mero o prefiere otro?',
        gather: true
      };
      
    default:
      return {
        message: '¬øQu√© espec√≠ficamente quiere cambiar?',
        gather: true
      };
  }
}

function handleIntentionResponse(text) {
  // Palabras de reserva directa - EXPANDIDAS
  const directReservationWords = [
    'reservar', 'reserva', 'mesa', 'quiero reservar', 'necesito reservar', 
    'me gustar√≠a reservar', 'quisiera reservar', 'deseo reservar', 
    'hacer una reserva', 'reservar mesa', 'quiero mesa', 'book', 'booking',
    'table reservation', 'reservieren', 'prenotazione', 'r√©servation'
  ];
  
  // Palabras de intenci√≥n general - EXPANDIDAS
  const generalIntentionWords = [
    'quiero', 'necesito', 'me gustar√≠a', 'quisiera', 'deseo', 'quer√≠a',
    'si', 's√≠', 'vale', 'bueno', 'perfecto', 'adelante', 'want', 'need',
    'would like', 'm√∂chte', 'brauche', 'vorrei', 'j\'ai besoin'
  ];
  
  // Palabras de negaci√≥n o no reserva
  const negativeWords = [
    'no', 'nada', 'solo llamaba', 'informaci√≥n', 'pregunta', 'duda',
    'cancelar', 'cancelaci√≥n', 'no reserva'
  ];
  
  const lowerText = text.toLowerCase();
  
  // Verificar reserva directa
  if (directReservationWords.some(word => lowerText.includes(word))) {
    return { action: 'reservation' };
  }
  
  // Verificar negaci√≥n
  if (negativeWords.some(word => lowerText.includes(word))) {
    return { 
      action: 'clarify', 
      message: 'Entiendo. Si cambia de opini√≥n y quiere hacer una reserva, solo d√≠gamelo.' 
    };
  }
  
  // Verificar intenci√≥n general (asumir que es para reserva)
  if (generalIntentionWords.some(word => lowerText.includes(word))) {
    return { action: 'reservation' };
  }
  
  // Respuesta ambigua
  return { 
    action: 'clarify', 
    message: '¬øLe gustar√≠a hacer una reserva para nuestro restaurante?' 
  };
}

function handleUnclearResponse(text, field, language = 'es') {
  const responses = {
    people: {
      es: [
        'Disculpe, no entend√≠. ¬øCu√°ntas personas ser√°n?',
        '¬øPara cu√°ntas personas? D√≠game un n√∫mero del 1 al 20.',
        'No capt√© bien. ¬øCu√°ntas personas van a venir?',
        '¬øPodr√≠a repetir? ¬øPara cu√°ntas personas?',
        'Disculpe, ¬øcu√°ntas personas ser√°n en total?'
      ],
      en: [
        'Sorry, I didn\'t understand. How many people will it be?',
        'For how many people? Tell me a number from 1 to 20.',
        'I didn\'t catch that well. How many people are coming?',
        'Could you repeat? For how many people?',
        'Sorry, how many people in total?'
      ],
      de: [
        'Entschuldigung, ich habe nicht verstanden. F√ºr wie viele Personen?',
        'F√ºr wie viele Personen? Sagen Sie mir eine Zahl von 1 bis 20.',
        'Ich habe das nicht gut verstanden. Wie viele Personen kommen?',
        'K√∂nnten Sie wiederholen? F√ºr wie viele Personen?',
        'Entschuldigung, wie viele Personen insgesamt?'
      ],
      it: [
        'Scusi, non ho capito. Per quante persone?',
        'Per quante persone? Dimmi un numero da 1 a 20.',
        'Non ho capito bene. Quante persone vengono?',
        'Potresti ripetere? Per quante persone?',
        'Scusi, quante persone in totale?'
      ],
      fr: [
        'D√©sol√©, je n\'ai pas compris. Pour combien de personnes?',
        'Pour combien de personnes? Dites-moi un nombre de 1 √† 20.',
        'Je n\'ai pas bien saisi. Combien de personnes viennent?',
        'Pourriez-vous r√©p√©ter? Pour combien de personnes?',
        'D√©sol√©, combien de personnes au total?'
      ],
      pt: [
        'Desculpe, n√£o entendi. Para quantas pessoas?',
        'Para quantas pessoas? Diga-me um n√∫mero de 1 a 20.',
        'N√£o entendi bem. Quantas pessoas est√£o vindo?',
        'Poderia repetir? Para quantas pessoas?',
        'Desculpe, quantas pessoas no total?'
      ]
    },
    date: {
      es: [
        'No entend√≠ bien la fecha. ¬øQu√© d√≠a prefieren?',
        '¬øPara qu√© d√≠a? Pueden decir ma√±ana, pasado ma√±ana, o un d√≠a espec√≠fico.',
        'Disculpe, no capt√© la fecha. ¬øQu√© d√≠a les conviene?',
        '¬øPodr√≠an repetir? ¬øPara qu√© fecha?',
        'No entend√≠. ¬øQu√© d√≠a quieren venir?'
      ],
      en: [
        'I didn\'t understand the date well. What day do you prefer?',
        'For what day? You can say tomorrow, the day after tomorrow, or a specific day.',
        'Sorry, I didn\'t catch the date. What day suits you?',
        'Could you repeat? For what date?',
        'I didn\'t understand. What day do you want to come?'
      ],
      de: [
        'Ich habe das Datum nicht gut verstanden. Welchen Tag bevorzugen Sie?',
        'F√ºr welchen Tag? Sie k√∂nnen morgen, √ºbermorgen oder einen bestimmten Tag sagen.',
        'Entschuldigung, ich habe das Datum nicht verstanden. Welcher Tag passt Ihnen?',
        'K√∂nnten Sie wiederholen? F√ºr welches Datum?',
        'Ich habe nicht verstanden. An welchem Tag m√∂chten Sie kommen?'
      ],
      it: [
        'Non ho capito bene la data. Che giorno preferisci?',
        'Per che giorno? Puoi dire domani, dopodomani, o un giorno specifico.',
        'Scusi, non ho capito la data. Che giorno ti conviene?',
        'Potresti ripetere? Per che data?',
        'Non ho capito. Che giorno vuoi venire?'
      ],
      fr: [
        'Je n\'ai pas bien compris la date. Quel jour pr√©f√©rez-vous?',
        'Pour quel jour? Vous pouvez dire demain, apr√®s-demain, ou un jour sp√©cifique.',
        'D√©sol√©, je n\'ai pas saisi la date. Quel jour vous convient?',
        'Pourriez-vous r√©p√©ter? Pour quelle date?',
        'Je n\'ai pas compris. Quel jour voulez-vous venir?'
      ],
      pt: [
        'N√£o entendi bem a data. Que dia voc√™ prefere?',
        'Para que dia? Voc√™ pode dizer amanh√£, depois de amanh√£, ou um dia espec√≠fico.',
        'Desculpe, n√£o entendi a data. Que dia te conv√©m?',
        'Poderia repetir? Para que data?',
        'N√£o entendi. Que dia voc√™ quer vir?'
      ]
    },
    time: {
      es: [
        'No entend√≠ bien la hora. ¬øA qu√© hora prefieren?',
        '¬øA qu√© hora? Pueden decir por ejemplo: las ocho, las ocho y media...',
        'Disculpe, no capt√© la hora. ¬øA qu√© hora les gustar√≠a venir?',
        '¬øPodr√≠an repetir? ¬øA qu√© hora?',
        'No entend√≠. ¬øA qu√© hora quieren la reserva?'
      ],
      en: [
        'I didn\'t understand the time well. What time do you prefer?',
        'What time? You can say for example: eight o\'clock, eight thirty...',
        'Sorry, I didn\'t catch the time. What time would you like to come?',
        'Could you repeat? What time?',
        'I didn\'t understand. What time do you want the reservation?'
      ],
      de: [
        'Ich habe die Uhrzeit nicht gut verstanden. Zu welcher Uhrzeit bevorzugen Sie?',
        'Zu welcher Uhrzeit? Sie k√∂nnen zum Beispiel sagen: acht Uhr, halb neun...',
        'Entschuldigung, ich habe die Uhrzeit nicht verstanden. Zu welcher Uhrzeit m√∂chten Sie kommen?',
        'K√∂nnten Sie wiederholen? Zu welcher Uhrzeit?',
        'Ich habe nicht verstanden. Zu welcher Uhrzeit m√∂chten Sie die Reservierung?'
      ],
      it: [
        'Non ho capito bene l\'ora. A che ora preferisci?',
        'A che ora? Puoi dire per esempio: le otto, le otto e mezza...',
        'Scusi, non ho capito l\'ora. A che ora vorresti venire?',
        'Potresti ripetere? A che ora?',
        'Non ho capito. A che ora vuoi la prenotazione?'
      ],
      fr: [
        'Je n\'ai pas bien compris l\'heure. √Ä quelle heure pr√©f√©rez-vous?',
        '√Ä quelle heure? Vous pouvez dire par exemple: huit heures, huit heures et demie...',
        'D√©sol√©, je n\'ai pas saisi l\'heure. √Ä quelle heure aimeriez-vous venir?',
        'Pourriez-vous r√©p√©ter? √Ä quelle heure?',
        'Je n\'ai pas compris. √Ä quelle heure voulez-vous la r√©servation?'
      ],
      pt: [
        'N√£o entendi bem a hora. Que horas voc√™ prefere?',
        'Que horas? Voc√™ pode dizer por exemplo: oito horas, oito e meia...',
        'Desculpe, n√£o entendi a hora. Que horas gostaria de vir?',
        'Poderia repetir? Que horas?',
        'N√£o entendi. Que horas voc√™ quer a reserva?'
      ]
    },
    name: {
      es: [
        'Disculpe, no entend√≠ bien su nombre. ¬øC√≥mo se llama?',
        '¬øSu nombre? Por favor, d√≠gamelo despacio.',
        'No capt√© su nombre. ¬øPodr√≠a repetirlo?',
        'Disculpe, ¬øc√≥mo se llama?',
        '¬øPodr√≠a decirme su nombre otra vez?'
      ],
      en: [
        'Sorry, I didn\'t understand your name well. What\'s your name?',
        'Your name? Please tell me slowly.',
        'I didn\'t catch your name. Could you repeat it?',
        'Sorry, what\'s your name?',
        'Could you tell me your name again?'
      ],
      de: [
        'Entschuldigung, ich habe Ihren Namen nicht gut verstanden. Wie hei√üen Sie?',
        'Ihr Name? Bitte sagen Sie es mir langsam.',
        'Ich habe Ihren Namen nicht verstanden. K√∂nnten Sie ihn wiederholen?',
        'Entschuldigung, wie hei√üen Sie?',
        'K√∂nnten Sie mir Ihren Namen noch einmal sagen?'
      ],
      it: [
        'Scusi, non ho capito bene il tuo nome. Come ti chiami?',
        'Il tuo nome? Per favore, dimmelo lentamente.',
        'Non ho capito il tuo nome. Potresti ripeterlo?',
        'Scusi, come ti chiami?',
        'Potresti dirmi il tuo nome di nuovo?'
      ],
      fr: [
        'D√©sol√©, je n\'ai pas bien compris votre nom. Comment vous appelez-vous?',
        'Votre nom? S\'il vous pla√Æt, dites-le moi lentement.',
        'Je n\'ai pas saisi votre nom. Pourriez-vous le r√©p√©ter?',
        'D√©sol√©, comment vous appelez-vous?',
        'Pourriez-vous me dire votre nom encore une fois?'
      ],
      pt: [
        'Desculpe, n√£o entendi bem o seu nome. Como voc√™ se chama?',
        'Seu nome? Por favor, diga-me devagar.',
        'N√£o entendi o seu nome. Poderia repetir?',
        'Desculpe, como voc√™ se chama?',
        'Poderia me dizer o seu nome novamente?'
      ]
    },
    phone: {
      es: [
        'No entend√≠ bien el n√∫mero. ¬øPodr√≠a decirlo d√≠gito por d√≠gito?',
        '¬øEl n√∫mero de tel√©fono? D√≠galo despacio, n√∫mero por n√∫mero.',
        'Disculpe, no capt√© el tel√©fono. ¬øPuede repetirlo?',
        '¬øPodr√≠a repetir el n√∫mero? D√≠gito por d√≠gito.',
        'No entend√≠. ¬øSu n√∫mero de tel√©fono?'
      ],
      en: [
        'I didn\'t understand the number well. Could you say it digit by digit?',
        'The phone number? Say it slowly, number by number.',
        'Sorry, I didn\'t catch the phone. Can you repeat it?',
        'Could you repeat the number? Digit by digit.',
        'I didn\'t understand. Your phone number?'
      ],
      de: [
        'Ich habe die Nummer nicht gut verstanden. K√∂nnten Sie sie Ziffer f√ºr Ziffer sagen?',
        'Die Telefonnummer? Sagen Sie sie langsam, Ziffer f√ºr Ziffer.',
        'Entschuldigung, ich habe das Telefon nicht verstanden. K√∂nnen Sie es wiederholen?',
        'K√∂nnten Sie die Nummer wiederholen? Ziffer f√ºr Ziffer.',
        'Ich habe nicht verstanden. Ihre Telefonnummer?'
      ],
      it: [
        'Non ho capito bene il numero. Potresti dirlo cifra per cifra?',
        'Il numero di telefono? Dillo lentamente, cifra per cifra.',
        'Scusi, non ho capito il telefono. Puoi ripeterlo?',
        'Potresti ripetere il numero? Cifra per cifra.',
        'Non ho capito. Il tuo numero di telefono?'
      ],
      fr: [
        'Je n\'ai pas bien compris le num√©ro. Pourriez-vous le dire chiffre par chiffre?',
        'Le num√©ro de t√©l√©phone? Dites-le lentement, chiffre par chiffre.',
        'D√©sol√©, je n\'ai pas saisi le t√©l√©phone. Pouvez-vous le r√©p√©ter?',
        'Pourriez-vous r√©p√©ter le num√©ro? Chiffre par chiffre.',
        'Je n\'ai pas compris. Votre num√©ro de t√©l√©phone?'
      ],
      pt: [
        'N√£o entendi bem o n√∫mero. Poderia diz√™-lo d√≠gito por d√≠gito?',
        'O n√∫mero de telefone? Diga devagar, n√∫mero por n√∫mero.',
        'Desculpe, n√£o entendi o telefone. Pode repetir?',
        'Poderia repetir o n√∫mero? D√≠gito por d√≠gito.',
        'N√£o entendi. O seu n√∫mero de telefone?'
      ]
    }
  };
  
  // Seleccionar respuesta aleatoria para evitar monoton√≠a
  const fieldResponses = responses[field] && responses[field][language] ? responses[field][language] : responses[field]['es'];
  return getRandomMessage(fieldResponses);
}

function isReservationRequest(text) {
  const reservationWords = [
    'reservar', 'reserva', 'mesa', 'quiero', 'necesito', 
    'me gustar√≠a', 'quisiera', 'deseo', 'quer√≠a',
    'hacer una reserva', 'reservar mesa', 'si', 's√≠', 'vale'
  ];
  return reservationWords.some(word => text.includes(word));
}

function extractPeopleCount(text) {
  const wordToNumber = {
    'uno': 1, 'una': 1, 'dos': 2, 'tres': 3, 'cuatro': 4, 'cinco': 5,
    'seis': 6, 'siete': 7, 'ocho': 8, 'nueve': 9, 'diez': 10,
    'once': 11, 'doce': 12, 'trece': 13, 'catorce': 14, 'quince': 15
  };

  // Detectar palabras de correcci√≥n - EXPANDIDAS
  const correctionWords = [
    'no', 'mejor', 'espera', 'espere', 'perd√≥n', 'disculpa', 'corrijo',
    'wait', 'sorry', 'excuse me', 'correction', 'change', 'different'
  ];
  const hasCorrection = correctionWords.some(word => text.includes(word));

  let foundNumbers = [];

  // Buscar n√∫meros en palabras
  for (const [word, number] of Object.entries(wordToNumber)) {
    const regex = new RegExp(`\\b${word}\\b`, 'gi');
    let match;
    while ((match = regex.exec(text)) !== null) {
      foundNumbers.push({ number, position: match.index });
    }
  }

  // Buscar n√∫meros digitales
  const digitMatches = text.matchAll(/\b(\d+)\b/g);
  for (const match of digitMatches) {
    const count = parseInt(match[1]);
    if (count >= 1 && count <= 20) {
      foundNumbers.push({ number: count, position: match.index });
    }
  }

  if (foundNumbers.length === 0) return null;

  // Si hay correcci√≥n o m√∫ltiples n√∫meros, tomar el √∫ltimo
  if (hasCorrection || foundNumbers.length > 1) {
    foundNumbers.sort((a, b) => b.position - a.position);
    return foundNumbers[0].number;
  }

  // Si solo hay un n√∫mero, devolverlo
  return foundNumbers[0].number;
}

function extractDate(text) {
  const today = new Date();
  today.setHours(0, 0, 0, 0);

  console.log('üîç extractDate recibi√≥:', text);

  // Detectar palabras de correcci√≥n - EXPANDIDAS
  const correctionWords = [
    'no', 'mejor', 'espera', 'espere', 'perd√≥n', 'disculpa', 'corrijo',
    'wait', 'sorry', 'excuse me', 'correction', 'change', 'different'
  ];
  const hasCorrection = correctionWords.some(word => text.includes(word));

  let foundDates = [];

  // Si hay correcci√≥n, buscar la √∫ltima fecha mencionada
  let textToAnalyze = text;
  if (hasCorrection) {
    let lastCorrectionIndex = -1;
    correctionWords.forEach(word => {
      const index = text.lastIndexOf(word);
      if (index > lastCorrectionIndex) {
        lastCorrectionIndex = index;
      }
    });
    if (lastCorrectionIndex !== -1) {
      textToAnalyze = text.substring(lastCorrectionIndex);
    }
  }

  // Manejar "pasado ma√±ana" antes que "ma√±ana"
  if (textToAnalyze.includes('pasado ma√±ana') || (textToAnalyze.includes('pasado') && textToAnalyze.includes('ma√±ana'))) {
    const date = new Date(today);
    date.setDate(date.getDate() + 2);
    console.log('‚úÖ Detectado: pasado ma√±ana');
    return formatDateISO(date);
  }
  
  // Manejar "ma√±ana" pero no "pasado ma√±ana"
  if (textToAnalyze.includes('ma√±ana') && !textToAnalyze.includes('pasado')) {
    const date = new Date(today);
    date.setDate(date.getDate() + 1);
    console.log('‚úÖ Detectado: ma√±ana');
    return formatDateISO(date);
  }
  
  // Manejar "tomorrow" en ingl√©s
  if (textToAnalyze.includes('tomorrow')) {
    const date = new Date(today);
    date.setDate(date.getDate() + 1);
    console.log('‚úÖ Detectado: tomorrow');
    return formatDateISO(date);
  }
  
  // Manejar "today" en ingl√©s
  if (textToAnalyze.includes('today')) {
    console.log('‚úÖ Detectado: today');
    return formatDateISO(today);
  }
  
  if (textToAnalyze.includes('hoy')) {
    console.log('‚úÖ Detectado: hoy');
    return formatDateISO(today);
  }

  // Mapeo de nombres de meses en espa√±ol e ingl√©s (ANTES de d√≠as de la semana para priorizar)
  const monthNames = {
    // Espa√±ol
    'enero': 1, 'febrero': 2, 'marzo': 3, 'abril': 4,
    'mayo': 5, 'junio': 6, 'julio': 7, 'agosto': 8,
    'septiembre': 9, 'octubre': 10, 'noviembre': 11, 'diciembre': 12,
    // Ingl√©s
    'january': 1, 'february': 2, 'march': 3, 'april': 4,
    'may': 5, 'june': 6, 'july': 7, 'august': 8,
    'september': 9, 'october': 10, 'november': 11, 'december': 12
  };

  // Intentar extraer fecha con nombre de mes: "10 de octubre", "15 de enero"
  for (const [monthName, monthNumber] of Object.entries(monthNames)) {
    if (textToAnalyze.includes(monthName)) {
      console.log(`‚úÖ Detectado mes: ${monthName}`);
      
      // Buscar el n√∫mero antes del mes (m√°s preciso)
      const patterns = [
        new RegExp(`(\\d{1,2})\\s*de\\s*${monthName}`, 'i'),  // "10 de octubre"
        new RegExp(`(\\d{1,2})\\s*${monthName}`, 'i'),         // "10 octubre" o "25 october"
        new RegExp(`${monthName}\\s*(\\d{1,2})`, 'i'),         // "octubre 10" o "october 25"
        new RegExp(`(\\d{1,2})\\s*(?:st|nd|rd|th)?\\s*${monthName}`, 'i'), // "25th october"
        new RegExp(`${monthName}\\s*(\\d{1,2})\\s*(?:st|nd|rd|th)?`, 'i'), // "october 25th"
      ];
      
      for (const pattern of patterns) {
        const match = textToAnalyze.match(pattern);
        if (match) {
          const day = parseInt(match[1]);
          console.log(`‚úÖ Detectado d√≠a: ${day}`);
          
          if (day >= 1 && day <= 31) {
            const year = today.getFullYear();
            try {
              const date = new Date(year, monthNumber - 1, day);
              // Si la fecha es anterior a hoy, asumir que es el a√±o siguiente
              if (date < today) {
                date.setFullYear(year + 1);
              }
              console.log(`‚úÖ Fecha procesada: ${formatDateISO(date)}`);
              return formatDateISO(date);
            } catch (e) {
              console.log('‚ùå Error creando fecha:', e);
              return null;
            }
          }
        }
      }
      
      // Si no encontr√≥ patr√≥n espec√≠fico, buscar cualquier n√∫mero
      const dayMatches = [...textToAnalyze.matchAll(/\b(\d{1,2})\b/g)];
      if (dayMatches.length > 0) {
        const day = parseInt(dayMatches[0][1]);
        if (day >= 1 && day <= 31) {
          const year = today.getFullYear();
          try {
            const date = new Date(year, monthNumber - 1, day);
            if (date < today) {
              date.setFullYear(year + 1);
            }
            console.log(`‚úÖ Fecha procesada (fallback): ${formatDateISO(date)}`);
            return formatDateISO(date);
          } catch (e) {
            return null;
          }
        }
      }
    }
  }

  // Detectar d√≠as de la semana (DESPU√âS de los meses)
  const daysOfWeek = {
    // Espa√±ol
    'lunes': 1, 'martes': 2, 'mi√©rcoles': 3, 'miercoles': 3,
    'jueves': 4, 'viernes': 5, 's√°bado': 6, 'sabado': 6, 'domingo': 0,
    // Ingl√©s
    'monday': 1, 'tuesday': 2, 'wednesday': 3, 'thursday': 4,
    'friday': 5, 'saturday': 6, 'sunday': 0
  };

  for (const [dayName, dayNumber] of Object.entries(daysOfWeek)) {
    if (textToAnalyze.includes(dayName)) {
      console.log(`‚úÖ Detectado d√≠a de la semana: ${dayName}`);
      const currentDay = today.getDay(); // 0=domingo, 1=lunes, etc.
      let daysUntil = dayNumber - currentDay;
      
      // Si el d√≠a ya pas√≥ esta semana, ir a la pr√≥xima semana
      if (daysUntil <= 0) {
        daysUntil += 7;
      }
      
      // Si dice "que viene" o "pr√≥ximo", asegurar que es la pr√≥xima semana
      if (textToAnalyze.includes('que viene') || textToAnalyze.includes('pr√≥ximo') || textToAnalyze.includes('proximo')) {
        if (daysUntil < 7) {
          daysUntil += 7;
        }
      }
      
      const date = new Date(today);
      date.setDate(date.getDate() + daysUntil);
      return formatDateISO(date);
    }
  }

  // Intentar extraer fecha num√©rica: "10/10", "10-10", "10/25", "25/10"
  const dateMatch = textToAnalyze.match(/(\d{1,2})[\/\-\s](?:de\s)?(\d{1,2})/);
  if (dateMatch) {
    const first = parseInt(dateMatch[1]);
    const second = parseInt(dateMatch[2]);
    const year = today.getFullYear();
    
    try {
      // Intentar ambos formatos: DD/MM y MM/DD
      let date1 = new Date(year, first - 1, second);
      let date2 = new Date(year, second - 1, first);
      
      // Si la primera fecha es v√°lida y no es pasada, usarla
      if (date1 >= today && date1.getMonth() === first - 1) {
        console.log(`‚úÖ Fecha num√©rica detectada: ${first}/${second}`);
        return formatDateISO(date1);
      }
      
      // Si la segunda fecha es v√°lida y no es pasada, usarla
      if (date2 >= today && date2.getMonth() === second - 1) {
        console.log(`‚úÖ Fecha num√©rica detectada: ${second}/${first}`);
        return formatDateISO(date2);
      }
      
      // Si ambas son pasadas, usar la del a√±o siguiente
      if (date1 < today) {
        date1.setFullYear(year + 1);
        console.log(`‚úÖ Fecha num√©rica detectada (a√±o siguiente): ${first}/${second}`);
        return formatDateISO(date1);
      }
      
    } catch (e) {
      return null;
    }
  }

  return null;
}

function extractTime(text) {
  const wordToNumber = {
    'una': 1, 'dos': 2, 'tres': 3, 'cuatro': 4, 'cinco': 5,
    'seis': 6, 'siete': 7, 'ocho': 8, 'nueve': 9, 'diez': 10,
    'once': 11, 'doce': 12
  };

  // Detectar palabras de correcci√≥n - EXPANDIDAS
  const correctionWords = [
    'no', 'mejor', 'espera', 'espere', 'perd√≥n', 'disculpa', 'corrijo',
    'wait', 'sorry', 'excuse me', 'correction', 'change', 'different'
  ];
  const hasCorrection = correctionWords.some(word => text.includes(word));

  let foundTimes = [];

  // Buscar horas en palabras
  for (const [word, number] of Object.entries(wordToNumber)) {
    const regex = new RegExp(`\\b${word}\\b`, 'gi');
    let match;
    while ((match = regex.exec(text)) !== null) {
      let hours = number;
      let minutes = 0;

      // MEJORADO: Manejar "y media", "y cuarto", "menos cuarto"
      if (text.includes('media') || text.includes('treinta')) {
        minutes = 30;
      } else if (text.includes('cuarto') || text.includes('quince')) {
        minutes = 15;
      } else if (text.includes('menos cuarto')) {
        hours = (hours + 23) % 24; // Restar 1 hora
        minutes = 45;
      }

      if (text.includes('noche') || text.includes('tarde')) {
        if (hours < 12) hours += 12;
      }

      if (hours >= 0 && hours <= 23) {
        foundTimes.push({
          time: `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`,
          position: match.index
        });
      }
    }
  }

  // Buscar horas en formato digital
  const timeMatches = text.matchAll(/\b(\d{1,2})(?::(\d{2}))?\b/g);
  for (const match of timeMatches) {
    let hours = parseInt(match[1]);
    const minutes = match[2] ? parseInt(match[2]) : 0;

    if (text.includes('noche') || text.includes('tarde')) {
      if (hours < 12) hours += 12;
    }

    if (hours >= 0 && hours <= 23 && minutes >= 0 && minutes <= 59) {
      foundTimes.push({
        time: `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`,
        position: match.index
      });
    }
  }

  if (foundTimes.length === 0) return null;

  // Si hay correcci√≥n o m√∫ltiples horas, tomar la √∫ltima
  if (hasCorrection || foundTimes.length > 1) {
    foundTimes.sort((a, b) => b.position - a.position);
    return foundTimes[0].time;
  }

  // Si solo hay una hora, devolverla
  return foundTimes[0].time;
}

function extractName(text) {
  // Limpiar el texto
  const cleaned = text
    .replace(/mi nombre es/gi, '')
    .replace(/me llamo/gi, '')
    .replace(/soy/gi, '')
    .replace(/my name is/gi, '')
    .replace(/i am/gi, '')
    .replace(/ich hei√üe/gi, '')
    .replace(/mi chiamo/gi, '')
    .replace(/je m\'appelle/gi, '')
    .replace(/meu nome √©/gi, '')
    .trim();
  
  if (cleaned.length > 1) {
    // Capitalizar cada palabra
    return cleaned
      .split(' ')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
      .join(' ');
  }
  
  return null;
}

function extractPhoneNumber(text) {
  // Primero intentar extraer n√∫meros directamente
  const directMatch = text.match(/\d{9,}/);
  if (directMatch) {
    return directMatch[0];
  }

  // Mapeo de palabras a d√≠gitos - EXPANDIDO
  const wordToDigit = {
    'cero': '0', 'uno': '1', 'una': '1', 'dos': '2', 'tres': '3', 
    'cuatro': '4', 'cinco': '5', 'seis': '6', 'siete': '7', 
    'ocho': '8', 'nueve': '9', 'zero': '0', 'one': '1', 'two': '2',
    'three': '3', 'four': '4', 'five': '5', 'six': '6', 'seven': '7',
    'eight': '8', 'nine': '9'
  };

  // Convertir palabras a d√≠gitos
  let phoneNumber = '';
  const words = text.split(/\s+/);
  
  for (const word of words) {
    const cleanWord = word.toLowerCase().replace(/[,\.]/g, '');
    if (wordToDigit[cleanWord]) {
      phoneNumber += wordToDigit[cleanWord];
    } else if (/^\d$/.test(cleanWord)) {
      // Si ya es un d√≠gito, agregarlo
      phoneNumber += cleanWord;
    }
  }

  // Si tenemos al menos 9 d√≠gitos, retornar
  if (phoneNumber.length >= 9) {
    return phoneNumber;
  }

  return null;
}

function getConfirmationMessage(data, language = 'es') {
  const phoneFormatted = formatPhoneForSpeech(data.TelefonReserva, language);
  
  const confirmations = {
    es: `Confirmo: ${data.NumeroReserva} ${data.NumeroReserva === 1 ? 'persona' : 'personas'}, ${formatDateSpanish(data.FechaReserva)} a las ${data.HoraReserva}, a nombre de ${data.NomReserva}, tel√©fono ${phoneFormatted}. ¬øEs correcto?`,
    en: `I confirm: ${data.NumeroReserva} ${data.NumeroReserva === 1 ? 'person' : 'people'}, ${formatDateEnglish(data.FechaReserva)} at ${data.HoraReserva}, under the name of ${data.NomReserva}, phone ${phoneFormatted}. Is it correct?`,
    de: `Ich best√§tige: ${data.NumeroReserva} ${data.NumeroReserva === 1 ? 'Person' : 'Personen'}, ${formatDateGerman(data.FechaReserva)} um ${data.HoraReserva}, unter dem Namen ${data.NomReserva}, Telefon ${phoneFormatted}. Ist es richtig?`,
    it: `Confermo: ${data.NumeroReserva} ${data.NumeroReserva === 1 ? 'persona' : 'persone'}, ${formatDateItalian(data.FechaReserva)} alle ${data.HoraReserva}, a nome di ${data.NomReserva}, telefono ${phoneFormatted}. √à corretto?`,
    fr: `Je confirme: ${data.NumeroReserva} ${data.NumeroReserva === 1 ? 'personne' : 'personnes'}, ${formatDateFrench(data.FechaReserva)} √† ${data.HoraReserva}, au nom de ${data.NomReserva}, t√©l√©phone ${phoneFormatted}. Est-ce correct?`,
    pt: `Confirmo: ${data.NumeroReserva} ${data.NumeroReserva === 1 ? 'pessoa' : 'pessoas'}, ${formatDatePortuguese(data.FechaReserva)} √†s ${data.HoraReserva}, em nome de ${data.NomReserva}, telefone ${phoneFormatted}. Est√° correto?`
  };
  
  return confirmations[language] || confirmations['es'];
}

function formatPhoneForSpeech(phone, language = 'es') {
  // Limpiar el tel√©fono de caracteres no num√©ricos
  const cleanPhone = phone.replace(/\D/g, '');
  
  // Convertir cada d√≠gito en su palabra seg√∫n el idioma
  const digitWords = {
    es: {
      '0': 'cero', '1': 'uno', '2': 'dos', '3': 'tres', '4': 'cuatro',
      '5': 'cinco', '6': 'seis', '7': 'siete', '8': 'ocho', '9': 'nueve'
    },
    en: {
      '0': 'zero', '1': 'one', '2': 'two', '3': 'three', '4': 'four',
      '5': 'five', '6': 'six', '7': 'seven', '8': 'eight', '9': 'nine'
    },
    de: {
      '0': 'null', '1': 'eins', '2': 'zwei', '3': 'drei', '4': 'vier',
      '5': 'f√ºnf', '6': 'sechs', '7': 'sieben', '8': 'acht', '9': 'neun'
    },
    it: {
      '0': 'zero', '1': 'uno', '2': 'due', '3': 'tre', '4': 'quattro',
      '5': 'cinque', '6': 'sei', '7': 'sette', '8': 'otto', '9': 'nove'
    },
    fr: {
      '0': 'z√©ro', '1': 'un', '2': 'deux', '3': 'trois', '4': 'quatre',
      '5': 'cinq', '6': 'six', '7': 'sept', '8': 'huit', '9': 'neuf'
    },
    pt: {
      '0': 'zero', '1': 'um', '2': 'dois', '3': 'tr√™s', '4': 'quatro',
      '5': 'cinco', '6': 'seis', '7': 'sete', '8': 'oito', '9': 'nove'
    }
  };
  
  const words = digitWords[language] || digitWords['es'];
  
  // Convertir cada d√≠gito y a√±adir comas para pausas naturales cada 3 d√≠gitos
  let result = '';
  for (let i = 0; i < cleanPhone.length; i++) {
    result += words[cleanPhone[i]];
    // A√±adir una pausa despu√©s de cada 3 d√≠gitos (excepto al final)
    if ((i + 1) % 3 === 0 && i !== cleanPhone.length - 1) {
      result += ', ';
    } else if (i !== cleanPhone.length - 1) {
      result += ' ';
    }
  }
  
  return result;
}

function formatDateISO(date) {
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  return `${year}-${month}-${day}`;
}

function formatDateSpanish(dateStr) {
  if (!dateStr) return '';
  const [year, month, day] = dateStr.split('-');
  const months = ['enero', 'febrero', 'marzo', 'abril', 'mayo', 'junio',
                  'julio', 'agosto', 'septiembre', 'octubre', 'noviembre', 'diciembre'];
  return `${parseInt(day)} de ${months[parseInt(month) - 1]}`;
}

function formatDateEnglish(dateStr) {
  if (!dateStr) return '';
  const [year, month, day] = dateStr.split('-');
  const months = ['January', 'February', 'March', 'April', 'May', 'June',
                  'July', 'August', 'September', 'October', 'November', 'December'];
  return `${months[parseInt(month) - 1]} ${parseInt(day)}`;
}

function formatDateGerman(dateStr) {
  if (!dateStr) return '';
  const [year, month, day] = dateStr.split('-');
  const months = ['Januar', 'Februar', 'M√§rz', 'April', 'Mai', 'Juni',
                  'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember'];
  return `${parseInt(day)}. ${months[parseInt(month) - 1]}`;
}

function formatDateItalian(dateStr) {
  if (!dateStr) return '';
  const [year, month, day] = dateStr.split('-');
  const months = ['gennaio', 'febbraio', 'marzo', 'aprile', 'maggio', 'giugno',
                  'luglio', 'agosto', 'settembre', 'ottobre', 'novembre', 'dicembre'];
  return `${parseInt(day)} ${months[parseInt(month) - 1]}`;
}

function formatDateFrench(dateStr) {
  if (!dateStr) return '';
  const [year, month, day] = dateStr.split('-');
  const months = ['janvier', 'f√©vrier', 'mars', 'avril', 'mai', 'juin',
                  'juillet', 'ao√ªt', 'septembre', 'octobre', 'novembre', 'd√©cembre'];
  return `${parseInt(day)} ${months[parseInt(month) - 1]}`;
}

function formatDatePortuguese(dateStr) {
  if (!dateStr) return '';
  const [year, month, day] = dateStr.split('-');
  const months = ['janeiro', 'fevereiro', 'mar√ßo', 'abril', 'maio', 'junho',
                  'julho', 'agosto', 'setembro', 'outubro', 'novembro', 'dezembro'];
  return `${parseInt(day)} de ${months[parseInt(month) - 1]}`;
}

function escapeXml(text) {
  return text
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&apos;');
}

function generateMarkdownConversation(state) {
  const { conversationHistory, phone, data } = state;
  const timestamp = new Date().toISOString();
  
  let markdown = `# üìû Conversaci√≥n de Reserva\n\n`;
  
  // Informaci√≥n de la llamada
  markdown += `## üìã Informaci√≥n de la Llamada\n`;
  markdown += `- **Tel√©fono**: ${phone}\n`;
  markdown += `- **Fecha**: ${new Date().toLocaleDateString('es-ES')}\n`;
  markdown += `- **Hora**: ${new Date().toLocaleTimeString('es-ES')}\n`;
  markdown += `- **Sistema**: Twilio (Hard-coded Mejorado)\n`;
  markdown += `- **Idioma**: ${state.language || 'es'}\n`;
  markdown += `- **Estado**: ${state.step === 'complete' ? '‚úÖ Completada' : '‚ö†Ô∏è Incompleta'}\n\n`;
  
  // Datos de la reserva (si est√°n disponibles)
  if (data && Object.keys(data).length > 0) {
    markdown += `## üçΩÔ∏è Datos de la Reserva\n`;
    if (data.NumeroReserva) markdown += `- **Personas**: ${data.NumeroReserva}\n`;
    if (data.FechaReserva) markdown += `- **Fecha**: ${formatDateSpanish(data.FechaReserva)}\n`;
    if (data.HoraReserva) markdown += `- **Hora**: ${data.HoraReserva}\n`;
    if (data.NomReserva) markdown += `- **Nombre**: ${data.NomReserva}\n`;
    if (data.TelefonReserva) markdown += `- **Tel√©fono Reserva**: ${data.TelefonReserva}\n`;
    markdown += `\n`;
  }
  
  // Conversaci√≥n paso a paso
  markdown += `## üí¨ Transcripci√≥n de la Conversaci√≥n\n\n`;
  
  conversationHistory.forEach((entry, index) => {
    const time = new Date(entry.timestamp).toLocaleTimeString('es-ES');
    const step = index + 1;
    
    if (entry.role === 'user') {
      markdown += `### ${step}. üë§ Cliente (${time})\n`;
      markdown += `> ${entry.message}\n\n`;
    } else {
      markdown += `### ${step}. ü§ñ Bot (${time})\n`;
      markdown += `${entry.message}\n\n`;
    }
  });
  
  // An√°lisis de la conversaci√≥n
  markdown += `## üìä An√°lisis de la Conversaci√≥n\n\n`;
  markdown += `- **Total de intercambios**: ${conversationHistory.length}\n`;
  markdown += `- **Duraci√≥n estimada**: ${Math.ceil(conversationHistory.length * 15)} segundos\n`;
  
  // Contar pasos completados
  const stepsCompleted = ['ask_people', 'ask_date', 'ask_time', 'ask_name', 'ask_phone'].filter(step => {
    return state.data[step === 'ask_people' ? 'NumeroReserva' : 
                      step === 'ask_date' ? 'FechaReserva' :
                      step === 'ask_time' ? 'HoraReserva' :
                      step === 'ask_name' ? 'NomReserva' :
                      'TelefonReserva'];
  }).length;
  
  markdown += `- **Pasos completados**: ${stepsCompleted}/5\n`;
  
  // Detectar si fue exitosa
  const wasSuccessful = state.step === 'complete';
  markdown += `- **Resultado**: ${wasSuccessful ? '‚úÖ Reserva completada exitosamente' : '‚ùå Conversaci√≥n incompleta'}\n\n`;
  
  // Detectar problemas comunes y sugerir mejoras
  markdown += `## üîç An√°lisis de Problemas y Mejoras\n\n`;
  
  const issues = [];
  const suggestions = [];
  const history = conversationHistory.map(h => h.message.toLowerCase());
  
  // 1. DETECTAR REPETICIONES
  const repeatedMessages = history.filter((msg, index) => 
    history.indexOf(msg) !== index
  );
  if (repeatedMessages.length > 0) {
    issues.push(`‚ö†Ô∏è Mensajes repetidos detectados (${repeatedMessages.length})`);
    suggestions.push(`üí° **Soluci√≥n**: Implementar m√°s variaciones de respuestas para evitar repetici√≥n`);
    suggestions.push(`üí° **T√©cnica**: Usar arrays de 10-15 frases diferentes por cada paso`);
  }
  
  // 2. DETECTAR ERRORES DE COMPRENSI√ìN
  const errorMessages = history.filter(msg => 
    msg.includes('no entend√≠') || msg.includes('disculpe') || msg.includes('perd√≥n')
  );
  if (errorMessages.length > 0) {
    issues.push(`‚ö†Ô∏è Errores de comprensi√≥n: ${errorMessages.length}`);
    
    // Analizar QU√â no entendi√≥
    const unclearResponses = conversationHistory.filter(entry => 
      entry.role === 'bot' && (
        entry.message.includes('no entend√≠') || 
        entry.message.includes('Disculpe') || 
        entry.message.includes('Perd√≥n')
      )
    );
    
    if (unclearResponses.length > 0) {
      suggestions.push(`üí° **Problema espec√≠fico**: El bot no entendi√≥ ${unclearResponses.length} respuestas del cliente`);
      suggestions.push(`üí° **Soluci√≥n**: Mejorar patrones regex o implementar Gemini para comprensi√≥n contextual`);
    }
  }
  
  // 3. DETECTAR CONVERSACI√ìN MUY LARGA
  if (conversationHistory.length > 15) {
    issues.push(`‚ö†Ô∏è Conversaci√≥n muy larga (${conversationHistory.length} intercambios)`);
    suggestions.push(`üí° **Problema**: Conversaci√≥n excede el promedio ideal de 10-12 intercambios`);
    suggestions.push(`üí° **Causa posible**: M√∫ltiples errores de comprensi√≥n o cliente indeciso`);
    suggestions.push(`üí° **Soluci√≥n**: Reducir timeouts y mejorar comprensi√≥n para conversaciones m√°s eficientes`);
  }
  
  // 4. DETECTAR CONVERSACIONES MUY CORTAS (posible problema)
  if (conversationHistory.length < 5 && state.step !== 'complete') {
    issues.push(`‚ö†Ô∏è Conversaci√≥n muy corta (${conversationHistory.length} intercambios)`);
    suggestions.push(`üí° **Problema**: Conversaci√≥n termin√≥ prematuramente`);
    suggestions.push(`üí° **Posibles causas**: Cliente colg√≥, error t√©cnico, o bot muy agresivo`);
  }
  
  // 5. DETECTAR PATRONES DE TIMEOUT
  const timeoutMessages = history.filter(msg => 
    msg.includes('no escuch√©') || msg.includes('¬øsigue ah√≠?')
  );
  if (timeoutMessages.length > 0) {
    issues.push(`‚ö†Ô∏è Timeouts detectados (${timeoutMessages.length})`);
    suggestions.push(`üí° **Problema**: El bot cort√≥ al cliente ${timeoutMessages.length} vez(es)`);
    suggestions.push(`üí° **Soluci√≥n**: Aumentar speechTimeout de 1s a 2s o ajustar seg√∫n el cliente`);
  }
  
  // 6. DETECTAR CORRECCIONES EXCESIVAS
  const correctionWords = history.filter(msg => 
    msg.includes('no, mejor') || msg.includes('espera') || msg.includes('cambiar')
  );
  if (correctionWords.length > 2) {
    issues.push(`‚ö†Ô∏è M√∫ltiples correcciones detectadas (${correctionWords.length})`);
    suggestions.push(`üí° **Problema**: Cliente cambi√≥ de opini√≥n muchas veces`);
    suggestions.push(`üí° **Soluci√≥n**: Mejorar extracci√≥n para capturar la correcci√≥n final autom√°ticamente`);
  }
  
  // 7. AN√ÅLISIS DE FLUJO
  const userResponses = conversationHistory.filter(h => h.role === 'user');
  const avgResponseLength = userResponses.reduce((sum, r) => sum + r.message.length, 0) / userResponses.length;
  
  if (avgResponseLength > 50) {
    issues.push(`‚ö†Ô∏è Respuestas del cliente muy largas (promedio: ${Math.round(avgResponseLength)} chars)`);
    suggestions.push(`üí° **Problema**: Cliente dice demasiado en cada respuesta`);
    suggestions.push(`üí° **Soluci√≥n**: Preguntas m√°s espec√≠ficas para obtener respuestas m√°s cortas`);
  }
  
  // MOSTRAR RESULTADOS
  if (issues.length === 0) {
    markdown += `‚úÖ **Conversaci√≥n √≥ptima** - No se detectaron problemas significativos\n\n`;
    markdown += `üéØ **M√©tricas excelentes**:\n`;
    markdown += `- Conversaci√≥n fluida y eficiente\n`;
    markdown += `- Sin errores de comprensi√≥n\n`;
    markdown += `- Duraci√≥n apropiada\n`;
    markdown += `- Cliente satisfecho\n\n`;
  } else {
    markdown += `## üìã Problemas Detectados\n\n`;
    issues.forEach((issue, index) => {
      markdown += `${index + 1}. ${issue}\n`;
    });
    
    markdown += `\n## üí° Sugerencias de Mejora\n\n`;
    suggestions.forEach((suggestion, index) => {
      markdown += `${index + 1}. ${suggestion}\n`;
    });
    
    // Calcular puntuaci√≥n de calidad
    const qualityScore = Math.max(0, 100 - (issues.length * 15) - (conversationHistory.length - 10) * 2);
    markdown += `\n## üìä Puntuaci√≥n de Calidad\n`;
    markdown += `- **Score**: ${qualityScore}/100\n`;
    markdown += `- **Estado**: ${qualityScore >= 80 ? 'üü¢ Excelente' : qualityScore >= 60 ? 'üü° Aceptable' : 'üî¥ Necesita Mejoras'}\n\n`;
  }
  
  markdown += `\n---\n`;
  markdown += `*Generado autom√°ticamente el ${new Date().toLocaleString('es-ES')}*\n`;
  
  return markdown;
}
