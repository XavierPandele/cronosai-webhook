// Testing del sistema premium sin Gemini (fallback mode)
console.log('üß™ Testing Sistema Premium Fallback (sin Gemini)...\n');

// Simular que no hay API key
process.env.GOOGLE_API_KEY = '';

// Importar el sistema premium
const { GoogleGenerativeAI } = require('@google/generative-ai');

// Configurar Gemini (opcional)
let genAI = null;
let model = null;

// Verificar si Gemini est√° disponible
if (process.env.GOOGLE_API_KEY) {
  try {
    genAI = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY);
    model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
    console.log('‚úÖ Gemini AI configurado correctamente');
  } catch (error) {
    console.log('‚ö†Ô∏è Error configurando Gemini:', error.message);
    console.log('üîÑ Usando sistema h√≠brido (fallback a respuestas hard-coded)');
  }
} else {
  console.log('‚ö†Ô∏è GOOGLE_API_KEY no configurada');
  console.log('üîÑ Usando sistema h√≠brido (fallback a respuestas hard-coded)');
}

// Funci√≥n de an√°lisis fallback
function analyzeUserInputFallback(userInput) {
  console.log('üîÑ Usando an√°lisis fallback (sin Gemini)');
  
  // Detecci√≥n b√°sica de idioma por palabras clave
  const languagePatterns = {
    en: /\b(hello|hi|reservation|table|people|time|date|yes|no|thank you)\b/i,
    de: /\b(hallo|reservierung|tisch|personen|zeit|datum|ja|nein|danke)\b/i,
    it: /\b(ciao|prenotazione|tavolo|persone|ora|data|s√¨|no|grazie)\b/i,
    fr: /\b(bonjour|r√©servation|table|personnes|heure|date|oui|non|merci)\b/i,
    pt: /\b(ol√°|reserva|mesa|pessoas|hora|data|sim|n√£o|obrigado)\b/i
  };
  
  let detectedLanguage = 'es'; // Espa√±ol por defecto
  for (const [lang, pattern] of Object.entries(languagePatterns)) {
    if (pattern.test(userInput)) {
      detectedLanguage = lang;
      break;
    }
  }
  
  // Detecci√≥n b√°sica de sentimiento
  let sentiment = 'neutral';
  if (userInput.includes('gracias') || userInput.includes('perfecto') || userInput.includes('excelente')) {
    sentiment = 'positive';
  } else if (userInput.includes('no') || userInput.includes('mal') || userInput.includes('error')) {
    sentiment = 'negative';
  } else if (userInput.includes('urgente') || userInput.includes('r√°pido') || userInput.includes('ya')) {
    sentiment = 'frustrated';
  }
  
  return {
    language: detectedLanguage,
    sentiment: sentiment,
    intent: 'reservation',
    urgency: 'medium',
    confidence: 0.7
  };
}

// Funci√≥n de respuestas fallback
function generateResponseFallback(step, language, sentiment) {
  console.log('üîÑ Usando respuestas fallback (sin Gemini)');
  
  const responses = {
    greeting: {
      es: {
        positive: ['¬°Hola! Bienvenido a nuestro restaurante. ¬øEn qu√© puedo ayudarle?', '¬°Buenos d√≠as! Bienvenido. ¬øC√≥mo puedo ayudarle hoy?'],
        neutral: ['¬°Hola! Gracias por llamar. ¬øEn qu√© puedo asistirle?', '¬°Buenas tardes! Bienvenido al restaurante. ¬øQu√© necesita?'],
        negative: ['¬°Hola! Entiendo que puede estar molesto. ¬øEn qu√© puedo ayudarle?', '¬°Hola! Lamento cualquier inconveniente. ¬øC√≥mo puedo asistirle?'],
        frustrated: ['¬°Hola! Entiendo su urgencia. ¬øEn qu√© puedo ayudarle r√°pidamente?', '¬°Hola! Veo que necesita ayuda urgente. ¬øQu√© puedo hacer por usted?']
      },
      en: {
        positive: ['Hello! Welcome to our restaurant. How can I help you?', 'Good morning! Welcome. How can I assist you today?'],
        neutral: ['Hello! Thank you for calling. How can I help you?', 'Good afternoon! Welcome to the restaurant. What do you need?'],
        negative: ['Hello! I understand you may be upset. How can I help you?', 'Hello! I apologize for any inconvenience. How can I assist you?'],
        frustrated: ['Hello! I understand your urgency. How can I help you quickly?', 'Hello! I see you need urgent help. What can I do for you?']
      },
      de: {
        positive: ['Hallo! Willkommen in unserem Restaurant. Wie kann ich Ihnen helfen?', 'Guten Morgen! Willkommen. Wie kann ich Ihnen heute helfen?'],
        neutral: ['Hallo! Vielen Dank f√ºr den Anruf. Wie kann ich Ihnen helfen?', 'Guten Tag! Willkommen im Restaurant. Was ben√∂tigen Sie?'],
        negative: ['Hallo! Ich verstehe, dass Sie ver√§rgert sein k√∂nnten. Wie kann ich Ihnen helfen?', 'Hallo! Entschuldigung f√ºr die Unannehmlichkeiten. Wie kann ich Ihnen helfen?'],
        frustrated: ['Hallo! Ich verstehe Ihre Dringlichkeit. Wie kann ich Ihnen schnell helfen?', 'Hallo! Ich sehe, Sie brauchen dringend Hilfe. Was kann ich f√ºr Sie tun?']
      },
      it: {
        positive: ['Ciao! Benvenuto nel nostro ristorante. Come posso aiutarti?', 'Buongiorno! Benvenuto. Come posso aiutarti oggi?'],
        neutral: ['Ciao! Grazie per la chiamata. Come posso aiutarti?', 'Buon pomeriggio! Benvenuto nel ristorante. Di cosa hai bisogno?'],
        negative: ['Ciao! Capisco che potresti essere arrabbiato. Come posso aiutarti?', 'Ciao! Mi scuso per qualsiasi inconveniente. Come posso aiutarti?'],
        frustrated: ['Ciao! Capisco la tua urgenza. Come posso aiutarti rapidamente?', 'Ciao! Vedo che hai bisogno di aiuto urgente. Cosa posso fare per te?']
      },
      fr: {
        positive: ['Bonjour! Bienvenue dans notre restaurant. Comment puis-je vous aider?', 'Bonjour! Bienvenue. Comment puis-je vous aider aujourd\'hui?'],
        neutral: ['Bonjour! Merci d\'avoir appel√©. Comment puis-je vous aider?', 'Bonjour! Bienvenue au restaurant. De quoi avez-vous besoin?'],
        negative: ['Bonjour! Je comprends que vous pourriez √™tre contrari√©. Comment puis-je vous aider?', 'Bonjour! Je m\'excuse pour tout inconv√©nient. Comment puis-je vous aider?'],
        frustrated: ['Bonjour! Je comprends votre urgence. Comment puis-je vous aider rapidement?', 'Bonjour! Je vois que vous avez besoin d\'aide urgente. Que puis-je faire pour vous?']
      },
      pt: {
        positive: ['Ol√°! Bem-vindo ao nosso restaurante. Como posso ajud√°-lo?', 'Bom dia! Bem-vindo. Como posso ajud√°-lo hoje?'],
        neutral: ['Ol√°! Obrigado por ligar. Como posso ajud√°-lo?', 'Boa tarde! Bem-vindo ao restaurante. Do que precisa?'],
        negative: ['Ol√°! Entendo que pode estar chateado. Como posso ajud√°-lo?', 'Ol√°! Pe√ßo desculpa por qualquer inconveniente. Como posso ajud√°-lo?'],
        frustrated: ['Ol√°! Entendo a sua urg√™ncia. Como posso ajud√°-lo rapidamente?', 'Ol√°! Vejo que precisa de ajuda urgente. O que posso fazer por si?']
      }
    },
    
    ask_people: {
      es: {
        positive: ['¬°Perfecto! ¬øPara cu√°ntas personas?', '¬°Excelente! ¬øCu√°ntas personas ser√°n?'],
        neutral: ['¬øPara cu√°ntas personas?', '¬øCu√°ntas personas ser√°n?'],
        negative: ['Entiendo. ¬øPara cu√°ntas personas?', 'Disculpe. ¬øCu√°ntas personas ser√°n?'],
        frustrated: ['R√°pido, ¬øcu√°ntas personas?', '¬øCu√°ntas personas? Necesito saberlo ya.']
      },
      en: {
        positive: ['Perfect! For how many people?', 'Excellent! How many people will it be?'],
        neutral: ['For how many people?', 'How many people will it be?'],
        negative: ['I understand. For how many people?', 'Sorry. How many people will it be?'],
        frustrated: ['Quick, how many people?', 'How many people? I need to know now.']
      },
      de: {
        positive: ['Perfekt! F√ºr wie viele Personen?', 'Ausgezeichnet! Wie viele Personen werden es sein?'],
        neutral: ['F√ºr wie viele Personen?', 'Wie viele Personen werden es sein?'],
        negative: ['Ich verstehe. F√ºr wie viele Personen?', 'Entschuldigung. Wie viele Personen werden es sein?'],
        frustrated: ['Schnell, wie viele Personen?', 'Wie viele Personen? Ich muss es jetzt wissen.']
      },
      it: {
        positive: ['Perfetto! Per quante persone?', 'Eccellente! Quante persone saranno?'],
        neutral: ['Per quante persone?', 'Quante persone saranno?'],
        negative: ['Capisco. Per quante persone?', 'Scusi. Quante persone saranno?'],
        frustrated: ['Veloce, quante persone?', 'Quante persone? Devo saperlo ora.']
      },
      fr: {
        positive: ['Parfait! Pour combien de personnes?', 'Excellent! Combien de personnes seront-ce?'],
        neutral: ['Pour combien de personnes?', 'Combien de personnes seront-ce?'],
        negative: ['Je comprends. Pour combien de personnes?', 'D√©sol√©. Combien de personnes seront-ce?'],
        frustrated: ['Rapidement, combien de personnes?', 'Combien de personnes? Je dois le savoir maintenant.']
      },
      pt: {
        positive: ['Perfeito! Para quantas pessoas?', 'Excelente! Quantas pessoas ser√£o?'],
        neutral: ['Para quantas pessoas?', 'Quantas pessoas ser√£o?'],
        negative: ['Entendo. Para quantas pessoas?', 'Desculpe. Quantas pessoas ser√£o?'],
        frustrated: ['R√°pido, quantas pessoas?', 'Quantas pessoas? Preciso saber agora.']
      }
    }
  };
  
  const stepResponses = responses[step]?.[language]?.[sentiment] || responses[step]?.[language]?.['neutral'] || responses[step]?.['es']?.['neutral'];
  
  if (stepResponses && stepResponses.length > 0) {
    const randomIndex = Math.floor(Math.random() * stepResponses.length);
    return stepResponses[randomIndex];
  }
  
  // Fallback final
  return '¬øEn qu√© puedo ayudarle?';
}

// Testing
async function testFallbackSystem() {
  console.log('1Ô∏è‚É£ Testing detecci√≥n de idioma y sentimiento (fallback)...');
  
  const testCases = [
    { input: "Hola, quiero hacer una reserva", expected: "es" },
    { input: "Hello, I would like to make a reservation", expected: "en" },
    { input: "Hallo, ich m√∂chte eine Reservierung machen", expected: "de" },
    { input: "Ciao, vorrei fare una prenotazione", expected: "it" },
    { input: "Bonjour, je voudrais faire une r√©servation", expected: "fr" },
    { input: "Ol√°, gostaria de fazer uma reserva", expected: "pt" },
    { input: "Gracias, perfecto", expected: "es", sentiment: "positive" },
    { input: "No, esto est√° mal", expected: "es", sentiment: "negative" },
    { input: "Urgente, necesito ayuda ya", expected: "es", sentiment: "frustrated" }
  ];
  
  for (const testCase of testCases) {
    const analysis = analyzeUserInputFallback(testCase.input);
    console.log(`   Input: "${testCase.input}"`);
    console.log(`   Detected: ${analysis.language} (expected: ${testCase.expected})`);
    console.log(`   Sentiment: ${analysis.sentiment}${testCase.sentiment ? ` (expected: ${testCase.sentiment})` : ''}`);
    console.log(`   Confidence: ${analysis.confidence}`);
    console.log(`   ‚úÖ ${analysis.language === testCase.expected ? 'CORRECT' : 'INCORRECT'}\n`);
  }
  
  console.log('2Ô∏è‚É£ Testing generaci√≥n de respuestas (fallback)...');
  
  const responseTests = [
    { step: 'greeting', language: 'es', sentiment: 'positive' },
    { step: 'greeting', language: 'en', sentiment: 'frustrated' },
    { step: 'ask_people', language: 'de', sentiment: 'neutral' },
    { step: 'ask_people', language: 'it', sentiment: 'negative' },
    { step: 'greeting', language: 'fr', sentiment: 'positive' },
    { step: 'ask_people', language: 'pt', sentiment: 'frustrated' }
  ];
  
  for (const test of responseTests) {
    const response = generateResponseFallback(test.step, test.language, test.sentiment);
    console.log(`   Step: ${test.step}, Language: ${test.language}, Sentiment: ${test.sentiment}`);
    console.log(`   Response: "${response}"`);
    console.log(`   ‚úÖ Generated successfully\n`);
  }
  
  console.log('‚úÖ Todos los tests fallback completados exitosamente!');
  console.log('\nüéØ Sistema h√≠brido funcionando correctamente:');
  console.log('   - ‚úÖ Detecci√≥n de idioma por palabras clave');
  console.log('   - ‚úÖ Detecci√≥n de sentimiento b√°sica');
  console.log('   - ‚úÖ Respuestas adaptativas por idioma y sentimiento');
  console.log('   - ‚úÖ Fallback autom√°tico cuando Gemini no est√° disponible');
  console.log('\nüí° Para activar Gemini:');
  console.log('   1. Obtener API key de Google AI Studio');
  console.log('   2. Configurar GOOGLE_API_KEY en variables de entorno');
  console.log('   3. El sistema autom√°ticamente usar√° Gemini cuando est√© disponible');
}

// Ejecutar tests
testFallbackSystem();
